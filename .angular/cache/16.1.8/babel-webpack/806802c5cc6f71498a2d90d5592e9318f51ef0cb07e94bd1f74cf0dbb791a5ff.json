{"ast":null,"code":"var _class, _class2;\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { forkJoin, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap, withLatestFrom } from 'rxjs/operators';\nimport * as TimActions from 'src/app/store/igrac.action';\nimport * as IgracActions from 'src/app/store/igrac.action';\nimport * as fromApp from './igrac.selector';\nimport { select } from '@ngrx/store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/fudbalskitim.service\";\nimport * as i3 from \"@ngrx/store\";\nexport class TimEffects {\n  constructor(actions$, fudbalskiTimService, store) {\n    this.actions$ = actions$;\n    this.fudbalskiTimService = fudbalskiTimService;\n    this.store = store;\n    this.swapPlayers$ = createEffect(() => this.actions$.pipe(ofType(TimActions.swapPlayers), withLatestFrom(this.store.pipe(select(fromApp.selectTimState))), switchMap(([action, timState]) => {\n      const {\n        timID,\n        igracIzlaziId,\n        igracUlaziId\n      } = action;\n      const {\n        igraciTeren,\n        igraciZamena,\n        trenutniTimID\n      } = timState;\n      if (igracIzlaziId !== null && igracUlaziId !== null) {\n        const indexIzlazi = igraciTeren.findIndex(igrac => igrac.id === igracIzlaziId);\n        const indexUlazi = igraciZamena.findIndex(igrac => igrac.id === igracUlaziId);\n        if (indexIzlazi !== -1 && indexUlazi !== -1) {\n          // Zameni igrače na terenu\n          [igraciTeren[indexIzlazi], igraciZamena[indexUlazi]] = [igraciZamena[indexUlazi], igraciTeren[indexIzlazi]];\n          // Ažuriraj nizove igraciTerenIds i igraciZamenaIds\n          igraciTerenIds[indexIzlazi] = igracUlaziId;\n          igraciZamenaIds[indexUlazi] = igracIzlaziId;\n        }\n        // Kreiraj ažuriranu listu igracaTeren i igracaZamena na osnovu zamene\n        const updatedIgraciTeren = igraciTeren.map(igrac => {\n          if (igrac.id === igracIzlaziId) {\n            console.log(igraciTeren);\n            return {\n              ...igrac,\n              id: igracUlaziId\n            };\n          }\n          return igrac;\n        });\n        const updatedIgraciZamena = igraciZamena.map(igrac => {\n          if (igrac.id === igracUlaziId) {\n            return {\n              ...igrac,\n              id: igracIzlaziId\n            };\n          }\n          return igrac;\n        });\n        return this.fudbalskiTimService.getTimById(timID).pipe(switchMap(timToUpdate => {\n          if (!timToUpdate) {\n            return of(TimActions.swapPlayersFailed({\n              error: 'Tim not found'\n            })); // Vratite EMPTY observable ako tim nije pronađen\n          }\n          // Logika za zamenu igrača\n          return this.fudbalskiTimService.updateTimIgraci(timID, updatedIgraciTeren.map(igrac => igrac.id), updatedIgraciZamena.map(igrac => igrac.id), timToUpdate).pipe(map(() => TimActions.swapPlayersSuccess({\n            igraciTeren: updatedIgraciTeren,\n            igraciZamena: updatedIgraciZamena\n          })), catchError(error => of(TimActions.swapPlayersFailed({\n            error: 'Error updating igrači'\n          }))) // Akcija za rukovanje greškom\n          );\n        }));\n      } else {\n        // Vratite EMPTY observable ako nisu ispunjeni uslovi za zamenu\n        return of(TimActions.swapPlayersFailed({\n          error: 'Error updating igrači'\n        }));\n      }\n    })));\n    this.loadTimovi$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadTimovi), mergeMap(() => this.fudbalskiTimService.getSviTimovi().pipe(map(timovi => TimActions.loadTimoviSuccess({\n      timovi\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.updateTim$ = createEffect(() => this.actions$.pipe(ofType(TimActions.updateTim), mergeMap(action => this.fudbalskiTimService.updateTimIgraci(action.timId, action.igraciTeren, action.igraciZamena, action.tim).pipe(map(() => TimActions.updateTimSuccess()), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getTimById$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadTimById), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(map(tim => {\n      const igraciTeren = tim.igraciTeren;\n      const igraciZamena = tim.igraciZamena;\n      return TimActions.loadTimByIdSuccess({\n        tim,\n        igraciTeren,\n        igraciZamena\n      });\n    }), catchError(() => of({\n      type: 'load error'\n    }))))));\n  }\n}\n_class = TimEffects;\n_class.ɵfac = function TimEffects_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.FudbalskitimService), i0.ɵɵinject(i3.Store));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});\nexport class IgracEffects {\n  constructor(actions$, fudbalskiTimService) {\n    this.actions$ = actions$;\n    this.fudbalskiTimService = fudbalskiTimService;\n    this.loadIgraci$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.loadIgraci), mergeMap(() => this.fudbalskiTimService.getSviIgraci().pipe(map(igraci => IgracActions.loadIgraciSuccess({\n      igraci\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getIgracById$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.loadIgracById), mergeMap(action => this.fudbalskiTimService.getIgracById(action.igracID).pipe(map(igrac => IgracActions.loadIgracByIdSuccess({\n      igrac\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getIgraciByPozicija$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadIgraciByPozicija), mergeMap(action => this.fudbalskiTimService.getIgraciByPozicija(action.pozicija, action.timID).pipe(map(igraci => IgracActions.loadIgraciByPozicijaSuccess({\n      igraci\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getIgraciZamena$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadIgraciZamena), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(map(tim => tim.igraciZamena), switchMap(igraciZamenaIds => this.fudbalskiTimService.getIgraciByIds(igraciZamenaIds).pipe(map(igraciZamena => TimActions.loadIgraciZamenaSuccess({\n      igraciZamena\n    })), catchError(() => of({\n      type: 'load error'\n    }))))))));\n    this.getIgraciTeren$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadIgraciTeren), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(map(tim => tim.igraciTeren), switchMap(igraciTerenIds => this.fudbalskiTimService.getIgraciByIds(igraciTerenIds).pipe(map(igraciTeren => TimActions.loadIgraciTerenSuccess({\n      igraciTeren\n    })), catchError(() => of({\n      type: 'load error'\n    }))))))));\n    this.loadGolmani$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadGolmani), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const golmaniIds = tim.igraciTeren;\n      const igraciRequests = golmaniIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const golmani = igraci.filter(igrac => igrac.pozicija === 'golman');\n        return TimActions.loadGolmaniSuccess({\n          golmani\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n    this.loadOdbrambeni$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadOdbrambeni), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const odbrambeniIds = tim.igraciTeren;\n      const igraciRequests = odbrambeniIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const odbrambeni = igraci.filter(igrac => igrac.pozicija === 'odbrana');\n        return TimActions.loadOdbrambeniSuccess({\n          odbrambeni\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n    this.loadVeznjaci$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadVeznjaci), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const veznjaciIds = tim.igraciTeren;\n      const igraciRequests = veznjaciIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const veznjaci = igraci.filter(igrac => igrac.pozicija === 'sredina');\n        return TimActions.loadVeznjaciSuccess({\n          veznjaci\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n    this.loadNapadaci$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadNapadaci), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const napadaciIds = tim.igraciTeren;\n      const igraciRequests = napadaciIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const napadaci = igraci.filter(igrac => igrac.pozicija === 'sredina');\n        return TimActions.loadNapadaciSuccess({\n          napadaci\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n  }\n}\n_class2 = IgracEffects;\n_class2.ɵfac = function IgracEffects_Factory(t) {\n  return new (t || _class2)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.FudbalskitimService));\n};\n_class2.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class2,\n  factory: _class2.ɵfac\n});","map":{"version":3,"names":["createEffect","ofType","forkJoin","of","catchError","map","mergeMap","switchMap","withLatestFrom","TimActions","IgracActions","fromApp","select","TimEffects","constructor","actions$","fudbalskiTimService","store","swapPlayers$","pipe","swapPlayers","selectTimState","action","timState","timID","igracIzlaziId","igracUlaziId","igraciTeren","igraciZamena","trenutniTimID","indexIzlazi","findIndex","igrac","id","indexUlazi","igraciTerenIds","igraciZamenaIds","updatedIgraciTeren","console","log","updatedIgraciZamena","getTimById","timToUpdate","swapPlayersFailed","error","updateTimIgraci","swapPlayersSuccess","loadTimovi$","loadTimovi","getSviTimovi","timovi","loadTimoviSuccess","type","updateTim$","updateTim","timId","tim","updateTimSuccess","getTimById$","loadTimById","loadTimByIdSuccess","i0","ɵɵinject","i1","Actions","i2","FudbalskitimService","i3","Store","factory","ɵfac","IgracEffects","loadIgraci$","loadIgraci","getSviIgraci","igraci","loadIgraciSuccess","getIgracById$","loadIgracById","getIgracById","igracID","loadIgracByIdSuccess","getIgraciByPozicija$","loadIgraciByPozicija","getIgraciByPozicija","pozicija","loadIgraciByPozicijaSuccess","getIgraciZamena$","loadIgraciZamena","getIgraciByIds","loadIgraciZamenaSuccess","getIgraciTeren$","loadIgraciTeren","loadIgraciTerenSuccess","loadGolmani$","loadGolmani","golmaniIds","igraciRequests","golmani","filter","loadGolmaniSuccess","loadOdbrambeni$","loadOdbrambeni","odbrambeniIds","odbrambeni","loadOdbrambeniSuccess","loadVeznjaci$","loadVeznjaci","veznjaciIds","veznjaci","loadVeznjaciSuccess","loadNapadaci$","loadNapadaci","napadaciIds","napadaci","loadNapadaciSuccess"],"sources":["D:\\OneDrive\\OneDrive - Faculty of Electronic Engineering\\Radna površina\\AngularProjekat\\src\\app\\store\\igrac.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Observable, forkJoin, of } from 'rxjs';\r\nimport { catchError, map, mergeMap, switchMap, withLatestFrom } from 'rxjs/operators';\r\nimport { FudbalskitimService } from '../services/fudbalskitim.service';\r\nimport * as TimActions from 'src/app/store/igrac.action';\r\nimport * as IgracActions from 'src/app/store/igrac.action';\r\nimport { Igrac } from '../models/igrac';\r\nimport * as fromApp from './igrac.selector';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { selectIgraciTeren, selectIgraciZamena, selectSveState, selectTimState } from './igrac.selector';\r\nimport { AppState } from '../app.state';\r\n\r\n@Injectable()\r\nexport class TimEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private fudbalskiTimService: FudbalskitimService,\r\n    private store: Store<AppState>\r\n  ) { }\r\n\r\n  swapPlayers$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(TimActions.swapPlayers),\r\n    withLatestFrom(this.store.pipe(select(fromApp.selectTimState))),\r\n    switchMap(([action, timState]) => {\r\n      const { timID, igracIzlaziId, igracUlaziId } = action;\r\n      const { igraciTeren, igraciZamena, trenutniTimID } = timState;\r\n\r\n      if (igracIzlaziId !== null && igracUlaziId !== null) {\r\n        const indexIzlazi = igraciTeren.findIndex(igrac => igrac.id === igracIzlaziId);\r\n        const indexUlazi = igraciZamena.findIndex(igrac => igrac.id === igracUlaziId);\r\n\r\n        if (indexIzlazi !== -1 && indexUlazi !== -1) {\r\n          // Zameni igrače na terenu\r\n          [igraciTeren[indexIzlazi], igraciZamena[indexUlazi]] = [igraciZamena[indexUlazi], igraciTeren[indexIzlazi]];\r\n\r\n          // Ažuriraj nizove igraciTerenIds i igraciZamenaIds\r\n          igraciTerenIds[indexIzlazi] = igracUlaziId;\r\n          igraciZamenaIds[indexUlazi] = igracIzlaziId;\r\n        }\r\n        // Kreiraj ažuriranu listu igracaTeren i igracaZamena na osnovu zamene\r\n        const updatedIgraciTeren = igraciTeren.map(igrac => {\r\n          if (igrac.id === igracIzlaziId) {\r\n            console.log(igraciTeren);\r\n            return { ...igrac, id: igracUlaziId };\r\n            \r\n          }\r\n          \r\n          \r\n          return igrac;\r\n        });\r\n        const updatedIgraciZamena = igraciZamena.map(igrac => {\r\n          if (igrac.id === igracUlaziId) {\r\n            return { ...igrac, id: igracIzlaziId };\r\n          }\r\n          return igrac;\r\n        });\r\n\r\n        return this.fudbalskiTimService.getTimById(timID).pipe(\r\n          switchMap(timToUpdate => {\r\n            if (!timToUpdate) {\r\n              return of(TimActions.swapPlayersFailed({ error: 'Tim not found' })); // Vratite EMPTY observable ako tim nije pronađen\r\n            }\r\n\r\n            // Logika za zamenu igrača\r\n\r\n            return this.fudbalskiTimService.updateTimIgraci(\r\n              timID,\r\n              updatedIgraciTeren.map(igrac => igrac.id),\r\n              updatedIgraciZamena.map(igrac => igrac.id),\r\n              timToUpdate\r\n            ).pipe(\r\n              map(() => TimActions.swapPlayersSuccess({ igraciTeren: updatedIgraciTeren, igraciZamena: updatedIgraciZamena })),\r\n              catchError(error => of(TimActions.swapPlayersFailed({ error: 'Error updating igrači' }))) // Akcija za rukovanje greškom\r\n            );\r\n          }),\r\n        );\r\n      } else {\r\n        // Vratite EMPTY observable ako nisu ispunjeni uslovi za zamenu\r\n        return of(TimActions.swapPlayersFailed({ error: 'Error updating igrači' }))\r\n      }\r\n    })\r\n  )\r\n);\r\n\r\n\r\n  loadTimovi$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadTimovi),\r\n      mergeMap(() =>\r\n        this.fudbalskiTimService.getSviTimovi()\r\n          .pipe(\r\n            map(timovi => TimActions.loadTimoviSuccess({ timovi })),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  updateTim$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.updateTim),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.updateTimIgraci(\r\n          action.timId, action.igraciTeren, action.igraciZamena, action.tim\r\n        )\r\n          .pipe(\r\n            map(() => TimActions.updateTimSuccess()),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  getTimById$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadTimById),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          map(tim => {\r\n            const igraciTeren = tim.igraciTeren;\r\n            const igraciZamena = tim.igraciZamena;\r\n            return TimActions.loadTimByIdSuccess({\r\n              tim,\r\n              igraciTeren, igraciZamena\r\n            });\r\n          }),\r\n          catchError(() => of({ type: 'load error' }))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n\r\n}\r\n\r\n@Injectable()\r\nexport class IgracEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private fudbalskiTimService: FudbalskitimService\r\n  ) { }\r\n\r\n  loadIgraci$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(IgracActions.loadIgraci),\r\n      mergeMap(() =>\r\n        this.fudbalskiTimService.getSviIgraci()\r\n          .pipe(\r\n            map(igraci => IgracActions.loadIgraciSuccess({ igraci })),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgracById$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(IgracActions.loadIgracById),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getIgracById(action.igracID).pipe(\r\n          map(igrac => IgracActions.loadIgracByIdSuccess({ igrac })),\r\n          catchError(() => of({ type: 'load error' }))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgraciByPozicija$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadIgraciByPozicija),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getIgraciByPozicija(action.pozicija, action.timID).pipe(\r\n          map(igraci => IgracActions.loadIgraciByPozicijaSuccess({ igraci })),\r\n          catchError(() => of({ type: 'load error' }))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgraciZamena$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadIgraciZamena),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          map(tim => tim.igraciZamena),\r\n          switchMap(igraciZamenaIds =>\r\n            this.fudbalskiTimService.getIgraciByIds(igraciZamenaIds).pipe(\r\n              map(igraciZamena => TimActions.loadIgraciZamenaSuccess({ igraciZamena })),\r\n              catchError(() => of({ type: 'load error' }))\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgraciTeren$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadIgraciTeren),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          map(tim => tim.igraciTeren),\r\n          switchMap(igraciTerenIds =>\r\n            this.fudbalskiTimService.getIgraciByIds(igraciTerenIds).pipe(\r\n              map(igraciTeren => TimActions.loadIgraciTerenSuccess({ igraciTeren })),\r\n              catchError(() => of({ type: 'load error' }))\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadGolmani$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadGolmani),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          switchMap((tim: any) => {\r\n            const golmaniIds: number[] = tim.igraciTeren;\r\n            const igraciRequests: Observable<Igrac>[] = golmaniIds.map((id: number) =>\r\n              this.fudbalskiTimService.getIgracById(id)\r\n            );\r\n\r\n            return forkJoin(igraciRequests).pipe(\r\n              map((igraci: Igrac[]) => {\r\n                const golmani: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'golman');\r\n                return TimActions.loadGolmaniSuccess({ golmani });\r\n              }),\r\n              catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n            );\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadOdbrambeni$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadOdbrambeni),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          switchMap((tim: any) => {\r\n            const odbrambeniIds: number[] = tim.igraciTeren;\r\n            const igraciRequests: Observable<Igrac>[] = odbrambeniIds.map((id: number) =>\r\n              this.fudbalskiTimService.getIgracById(id)\r\n            );\r\n\r\n            return forkJoin(igraciRequests).pipe(\r\n              map((igraci: Igrac[]) => {\r\n                const odbrambeni: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'odbrana');\r\n                return TimActions.loadOdbrambeniSuccess({ odbrambeni });\r\n              }),\r\n              catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n            );\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadVeznjaci$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadVeznjaci),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          switchMap((tim: any) => {\r\n            const veznjaciIds: number[] = tim.igraciTeren;\r\n            const igraciRequests: Observable<Igrac>[] = veznjaciIds.map((id: number) =>\r\n              this.fudbalskiTimService.getIgracById(id)\r\n            );\r\n\r\n            return forkJoin(igraciRequests).pipe(\r\n              map((igraci: Igrac[]) => {\r\n                const veznjaci: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'sredina');\r\n                return TimActions.loadVeznjaciSuccess({ veznjaci });\r\n              }),\r\n              catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n            );\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadNapadaci$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadNapadaci),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          switchMap((tim: any) => {\r\n            const napadaciIds: number[] = tim.igraciTeren;\r\n            const igraciRequests: Observable<Igrac>[] = napadaciIds.map((id: number) =>\r\n              this.fudbalskiTimService.getIgracById(id)\r\n            );\r\n\r\n            return forkJoin(igraciRequests).pipe(\r\n              map((igraci: Igrac[]) => {\r\n                const napadaci: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'sredina');\r\n                return TimActions.loadNapadaciSuccess({ napadaci });\r\n              }),\r\n              catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n            );\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}