{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./jwt.service\";\nexport class AuthService {\n  constructor(jwtService) {\n    this.jwtService = jwtService;\n  }\n  isLoggedIn() {\n    return !!this.jwtService.getToken();\n  }\n  getUserId() {\n    // Uzmi ID korisnika iz JWT tokena\n    const token = this.jwtService.getToken();\n    console.log(\"Sad Ce TOKEN\");\n    console.log(token);\n    if (!token) {\n      return null;\n    }\n    // Dekodiraj JWT da bi dobili podatke o korisniku\n    const decodedToken = atob(token.split('.')[1]); // Dekodiran drugi deo JWT\n    const parsedToken = JSON.parse(decodedToken);\n    return parsedToken.userId;\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.JwtService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthService","constructor","jwtService","isLoggedIn","getToken","getUserId","token","console","log","decodedToken","atob","split","parsedToken","JSON","parse","userId","i0","ɵɵinject","i1","JwtService","factory","ɵfac","providedIn"],"sources":["D:\\OneDrive\\OneDrive - Faculty of Electronic Engineering\\Radna površina\\RWA - Drugi i treci projekat\\AngularProjekat\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { JwtService } from './jwt.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(private jwtService: JwtService) {}\n\n  isLoggedIn(): boolean {\n\n    return !!this.jwtService.getToken();\n  }\n\n  getUserId(): number | null {\n    // Uzmi ID korisnika iz JWT tokena\n    const token = this.jwtService.getToken();\n    console.log(\"Sad Ce TOKEN\")\n    console.log(token);\n    if (!token) {\n      return null;\n    }\n\n    // Dekodiraj JWT da bi dobili podatke o korisniku\n    const decodedToken = atob(token.split('.')[1]); // Dekodiran drugi deo JWT\n    const parsedToken = JSON.parse(decodedToken);\n\n    return parsedToken.userId;\n  }\n}\n"],"mappings":";;;AAMA,OAAM,MAAOA,WAAW;EACtBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;EAAe;EAE7CC,UAAUA,CAAA;IAER,OAAO,CAAC,CAAC,IAAI,CAACD,UAAU,CAACE,QAAQ,EAAE;EACrC;EAEAC,SAASA,CAAA;IACP;IACA,MAAMC,KAAK,GAAG,IAAI,CAACJ,UAAU,CAACE,QAAQ,EAAE;IACxCG,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3BD,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,IAAI,CAACA,KAAK,EAAE;MACV,OAAO,IAAI;;IAGb;IACA,MAAMG,YAAY,GAAGC,IAAI,CAACJ,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChD,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACL,YAAY,CAAC;IAE5C,OAAOG,WAAW,CAACG,MAAM;EAC3B;;SAtBWf,WAAW;;mBAAXA,MAAW,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAXnB,MAAW;EAAAoB,OAAA,EAAXpB,MAAW,CAAAqB,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}