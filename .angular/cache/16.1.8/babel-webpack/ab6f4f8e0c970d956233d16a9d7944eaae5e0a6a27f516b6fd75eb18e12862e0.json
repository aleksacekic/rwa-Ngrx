{"ast":null,"code":"var _class, _class2;\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport * as TimActions from 'src/app/store/igrac.action';\nimport * as IgracActions from 'src/app/store/igrac.action';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/fudbalskitim.service\";\nexport class TimEffects {\n  constructor(actions$, fudbalskiTimService) {\n    this.actions$ = actions$;\n    this.fudbalskiTimService = fudbalskiTimService;\n    this.loadTimovi$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadTimovi), mergeMap(() => this.fudbalskiTimService.getSviTimovi().pipe(map(timovi => TimActions.loadTimoviSuccess({\n      timovi\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.updateTim$ = createEffect(() => this.actions$.pipe(ofType(TimActions.updateTim), mergeMap(action => this.fudbalskiTimService.updateTimIgraci(action.timId, action.igraciTeren, action.igraciZamena, action.tim).pipe(map(() => TimActions.updateTimSuccess()), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.swapPlayers$ = createEffect(() => this.actions$.pipe(ofType(TimActions.swapPlayers), mergeMap(action => this.fudbalskiTimService.swapPlayers(action.igracIzlaziId, action.igracUlaziId).pipe(map(() => TimActions.swapPlayersSuccess()), catchError(() => of({\n      type: 'swap players error'\n    }))))));\n  }\n}\n_class = TimEffects;\n_class.ɵfac = function TimEffects_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.FudbalskitimService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});\nexport class IgracEffects {\n  constructor(actions$, fudbalskiTimService) {\n    this.actions$ = actions$;\n    this.fudbalskiTimService = fudbalskiTimService;\n    this.loadIgraci$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.loadIgraci), mergeMap(() => this.fudbalskiTimService.getSviIgraci().pipe(map(igraci => IgracActions.loadIgraciSuccess({\n      igraci\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n  }\n}\n_class2 = IgracEffects;\n_class2.ɵfac = function IgracEffects_Factory(t) {\n  return new (t || _class2)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.FudbalskitimService));\n};\n_class2.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class2,\n  factory: _class2.ɵfac\n});","map":{"version":3,"names":["createEffect","ofType","of","catchError","map","mergeMap","TimActions","IgracActions","TimEffects","constructor","actions$","fudbalskiTimService","loadTimovi$","pipe","loadTimovi","getSviTimovi","timovi","loadTimoviSuccess","type","updateTim$","updateTim","action","updateTimIgraci","timId","igraciTeren","igraciZamena","tim","updateTimSuccess","swapPlayers$","swapPlayers","igracIzlaziId","igracUlaziId","swapPlayersSuccess","i0","ɵɵinject","i1","Actions","i2","FudbalskitimService","factory","ɵfac","IgracEffects","loadIgraci$","loadIgraci","getSviIgraci","igraci","loadIgraciSuccess"],"sources":["D:\\OneDrive\\OneDrive - Faculty of Electronic Engineering\\Radna površina\\AngularProjekat\\src\\app\\store\\igrac.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { of } from 'rxjs';\r\nimport { catchError, map, mergeMap } from 'rxjs/operators';\r\nimport { FudbalskitimService } from '../services/fudbalskitim.service';\r\nimport * as TimActions from 'src/app/store/igrac.action';\r\nimport * as IgracActions from 'src/app/store/igrac.action';\r\n\r\n@Injectable()\r\nexport class TimEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private fudbalskiTimService: FudbalskitimService\r\n  ) {}\r\n\r\n  loadTimovi$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadTimovi),\r\n      mergeMap(() =>\r\n        this.fudbalskiTimService.getSviTimovi()\r\n          .pipe(\r\n            map(timovi => TimActions.loadTimoviSuccess({ timovi })),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  updateTim$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.updateTim),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.updateTimIgraci(\r\n          action.timId, action.igraciTeren, action.igraciZamena, action.tim\r\n        )\r\n          .pipe(\r\n            map(() => TimActions.updateTimSuccess()),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  swapPlayers$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.swapPlayers),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.swapPlayers(action.igracIzlaziId, action.igracUlaziId)\r\n          .pipe(\r\n            map(() => TimActions.swapPlayersSuccess()),\r\n            catchError(() => of({ type: 'swap players error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n}\r\n\r\n@Injectable()\r\nexport class IgracEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private fudbalskiTimService: FudbalskitimService\r\n  ) {}\r\n\r\n  loadIgraci$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(IgracActions.loadIgraci),\r\n      mergeMap(() =>\r\n        this.fudbalskiTimService.getSviIgraci()\r\n          .pipe(\r\n            map(igraci => IgracActions.loadIgraciSuccess({ igraci })),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}