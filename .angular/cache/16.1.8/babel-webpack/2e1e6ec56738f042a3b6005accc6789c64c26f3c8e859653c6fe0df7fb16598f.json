{"ast":null,"code":"var _class, _class2;\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { forkJoin, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap, withLatestFrom } from 'rxjs/operators';\nimport * as TimActions from 'src/app/store/igrac.action';\nimport * as IgracActions from 'src/app/store/igrac.action';\nimport * as fromApp from './igrac.selector';\nimport { select } from '@ngrx/store';\nimport { selectIgraciTransferLista, selectTrenutniKorisnik } from './igrac.selector';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/fudbalskitim.service\";\nimport * as i3 from \"@ngrx/store\";\nimport * as i4 from \"../services/korisnik.service\";\nexport class TimEffects {\n  constructor(actions$, fudbalskiTimService, store, korisnikService) {\n    this.actions$ = actions$;\n    this.fudbalskiTimService = fudbalskiTimService;\n    this.store = store;\n    this.korisnikService = korisnikService;\n    this.addIgracToZamene$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.addIgracToZamene), mergeMap(action => this.fudbalskiTimService.dodajIgracaZamenama(action.igracId, action.timId).pipe(map(() => IgracActions.addIgracToZameneSuccess({\n      igracId: action.igracId,\n      timId: action.timId\n    })), catchError(() => of(IgracActions.addIgracToZameneFailed()))))));\n    this.addKupljeniIgracURoster$ = createEffect(() => this.actions$.pipe(ofType(TimActions.addKupljeniIgracURoster), switchMap(action => this.fudbalskiTimService.dodajIgracaUListuIgraca(action.kupljeniIgrac, action.ciljaniTimId).pipe(map(() => IgracActions.addKupljeniIgracSuccess({\n      kupljeniIgrac: {\n        ...action.kupljeniIgrac,\n        timId: action.ciljaniTimId\n      },\n      azuriraniIdTima: action.ciljaniTimId\n    })), catchError(() => of(IgracActions.addKupljeniIgracFailed()))))));\n    // addKupljeniIgracURoster$ = createEffect(() =>\n    //   this.actions$.pipe(\n    //     ofType(TimActions.addKupljeniIgracURoster),\n    //     mergeMap((action) =>\n    //       this.fudbalskiTimService.dodajIgracaZamenama(action.kupljeniIgrac.id, action.ciljaniTimId).pipe(\n    //         map(() => IgracActions.addKupljeniIgracSuccess({\n    //           kupljeniIgrac: { ...action.kupljeniIgrac, timId: action.ciljaniTimId },\n    //           azuriraniIdTima: action.ciljaniTimId\n    //         })),\n    //         catchError(() => of(IgracActions.addKupljeniIgracFailed()))\n    //       )\n    //     )\n    //   )\n    // );\n    this.buyIgrac$ = createEffect(() => this.actions$.pipe(ofType(TimActions.buyIgrac), withLatestFrom(this.store.select(selectTrenutniKorisnik), this.store.select(selectIgraciTransferLista)), mergeMap(([action, trenutniKorisnik, igraciTransferLista]) => {\n      if (!trenutniKorisnik) {\n        return of(IgracActions.buyIgracFailed()); // Ako trenutniKorisnik nije definisan\n      }\n\n      const igrac = action.igrac;\n      const novaCena = trenutniKorisnik.virtuelniNovac - igrac.cena;\n      const ime = trenutniKorisnik.ime;\n      const id = trenutniKorisnik.id;\n      if (novaCena < 0) {\n        return of(IgracActions.buyIgracFailed());\n      }\n      const noviTrenutniKorisnik = {\n        ...trenutniKorisnik,\n        ime: ime,\n        id: id,\n        virtuelniNovac: novaCena\n      };\n      return this.korisnikService.updateVirtuelniNovac(noviTrenutniKorisnik.id, noviTrenutniKorisnik.ime, noviTrenutniKorisnik.virtuelniNovac, noviTrenutniKorisnik.timId).pipe(switchMap(() => [IgracActions.buyIgracSuccess({\n        igrac\n      }), IgracActions.updateTrenutniKorisnik({\n        korisnik: noviTrenutniKorisnik\n      })]));\n    })));\n    this.removeIgracFromTransferLista$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.removeIgracIzTransferLista), mergeMap(action => this.fudbalskiTimService.ukloniIgracaSaTransferListe(action.igracId).pipe(map(() => IgracActions.obrisiIgracIzTransferListaSuccess({\n      igracId: action.igracId\n    })), catchError(() => of(IgracActions.obrisiIgracIzTransferListaFailed()))))));\n    this.updateIgraciTransferLista$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.obrisiIgracIzTransferListaSuccess), withLatestFrom(this.store.select(selectIgraciTransferLista)), map(([action, igraciTransferLista]) => {\n      const igracIdZaBrisanje = action.igracId;\n      return igraciTransferLista.filter(igrac => igrac.id !== igracIdZaBrisanje);\n    }), map(igraci => IgracActions.updateIgraciTransferLista({\n      igraci\n    }))));\n    this.swapPlayers$ = createEffect(() => this.actions$.pipe(ofType(TimActions.swapPlayers), withLatestFrom(this.store.pipe(select(fromApp.selectTimState))), switchMap(([action, timState]) => {\n      const {\n        timID,\n        igracIzlaziId,\n        igracUlaziId\n      } = action;\n      const {\n        igraciTeren,\n        igraciZamena,\n        trenutniTimID\n      } = timState;\n      if (igracIzlaziId !== null && igracUlaziId !== null) {\n        return this.fudbalskiTimService.getIgracById(igracUlaziId).pipe(mergeMap(igracUlazi => {\n          // Ovde koristite informacije o igraču koji ulazi, npr. igracUlazi.ime, igracUlazi.ocena, itd.\n          // Kreiraj ažuriranu listu igracaTeren i igracaZamena na osnovu zamene\n          const updatedIgraciTeren = igraciTeren.map(igrac => {\n            if (igrac.id === igracIzlaziId) {\n              return {\n                ...igrac,\n                id: igracUlaziId,\n                ime: igracUlazi.ime,\n                ocena: igracUlazi.ocena\n              };\n            }\n            return igrac;\n          });\n          const updatedIgraciZamena = igraciZamena.map(igrac => {\n            if (igrac.id === igracUlaziId) {\n              return {\n                ...igrac,\n                id: igracIzlaziId,\n                ime: igracUlazi.ime,\n                ocena: igracUlazi.ocena\n              };\n            }\n            return igrac;\n          });\n          return this.fudbalskiTimService.getTimById(timID).pipe(switchMap(timToUpdate => {\n            if (!timToUpdate) {\n              return of(TimActions.swapPlayersFailed({\n                error: 'Tim not found'\n              })); // Vratite EMPTY observable ako tim nije pronađen\n            }\n            // Logika za zamenu igrača\n            return this.fudbalskiTimService.updateTimIgraci(timID, updatedIgraciTeren.map(igrac => igrac.id), updatedIgraciZamena.map(igrac => igrac.id), timToUpdate).pipe(map(() => TimActions.swapPlayersSuccess({\n              igraciTeren: updatedIgraciTeren,\n              igraciZamena: updatedIgraciZamena\n            })), catchError(error => of(TimActions.swapPlayersFailed({\n              error: 'Error updating igrači'\n            }))) // Akcija za rukovanje greškom\n            );\n          }));\n        }, {\n          // Vratite EMPTY observable ako nisu ispunjeni uslovi za zamenu\n          return: of(TimActions.swapPlayersFailed({\n            error: 'Error updating igrači'\n          }))\n        }));\n      }\n    })));\n    this.loadTimovi$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadTimovi), mergeMap(() => this.fudbalskiTimService.getSviTimovi().pipe(map(timovi => TimActions.loadTimoviSuccess({\n      timovi\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.updateTim$ = createEffect(() => this.actions$.pipe(ofType(TimActions.updateTim), mergeMap(action => this.fudbalskiTimService.updateTimIgraci(action.timId, action.igraciTeren, action.igraciZamena, action.tim).pipe(map(() => TimActions.updateTimSuccess()), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getTimById$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadTimById), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(map(tim => {\n      const igraciTeren = tim.igraciTeren;\n      const igraciZamena = tim.igraciZamena;\n      return TimActions.loadTimByIdSuccess({\n        tim,\n        igraciTeren,\n        igraciZamena\n      });\n    }), catchError(() => of({\n      type: 'load error'\n    }))))));\n  }\n}\n_class = TimEffects;\n_class.ɵfac = function TimEffects_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.FudbalskitimService), i0.ɵɵinject(i3.Store), i0.ɵɵinject(i4.KorisnikService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});\nexport class IgracEffects {\n  constructor(actions$, fudbalskiTimService, korisnikService) {\n    this.actions$ = actions$;\n    this.fudbalskiTimService = fudbalskiTimService;\n    this.korisnikService = korisnikService;\n    this.loadTrenutniKorisnik$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.loadTrenutniKorisnik),\n    // Pretpostavljeno ime akcije\n    mergeMap(() => this.korisnikService.getKorisnikById(1).pipe(\n    // Pretpostavljeno korisnikId\n    map(korisnik => IgracActions.loadTrenutniKorisnikSuccess({\n      korisnik\n    })), catchError(() => of({\n      type: 'Load Korisnik Failed'\n    }))))));\n    this.loadIgraci$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.loadIgraci), mergeMap(() => this.fudbalskiTimService.getSviIgraci().pipe(map(igraci => IgracActions.loadIgraciSuccess({\n      igraci\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getIgracById$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.loadIgracById), mergeMap(action => this.fudbalskiTimService.getIgracById(action.igracID).pipe(map(igrac => IgracActions.loadIgracByIdSuccess({\n      igrac\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getIgraciByPozicija$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadIgraciByPozicija), mergeMap(action => this.fudbalskiTimService.getIgraciByPozicija(action.pozicija, action.timID).pipe(map(igraci => IgracActions.loadIgraciByPozicijaSuccess({\n      igraci\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getIgraciZamena$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadIgraciZamena), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(map(tim => tim.igraciZamena), switchMap(igraciZamenaIds => this.fudbalskiTimService.getIgraciByIds(igraciZamenaIds).pipe(map(igraciZamena => TimActions.loadIgraciZamenaSuccess({\n      igraciZamena\n    })), catchError(() => of({\n      type: 'load error'\n    }))))))));\n    this.getIgraciTeren$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadIgraciTeren), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(map(tim => tim.igraciTeren), switchMap(igraciTerenIds => this.fudbalskiTimService.getIgraciByIds(igraciTerenIds).pipe(map(igraciTeren => TimActions.loadIgraciTerenSuccess({\n      igraciTeren\n    })), catchError(() => of({\n      type: 'load error'\n    }))))))));\n    this.loadGolmani$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadGolmani), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const golmaniIds = tim.igraciTeren;\n      const igraciRequests = golmaniIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const golmani = igraci.filter(igrac => igrac.pozicija === 'golman');\n        return TimActions.loadGolmaniSuccess({\n          golmani\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n    this.loadOdbrambeni$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadOdbrambeni), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const odbrambeniIds = tim.igraciTeren;\n      const igraciRequests = odbrambeniIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const odbrambeni = igraci.filter(igrac => igrac.pozicija === 'odbrana');\n        return TimActions.loadOdbrambeniSuccess({\n          odbrambeni\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n    this.loadVeznjaci$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadVeznjaci), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const veznjaciIds = tim.igraciTeren;\n      const igraciRequests = veznjaciIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const veznjaci = igraci.filter(igrac => igrac.pozicija === 'sredina');\n        return TimActions.loadVeznjaciSuccess({\n          veznjaci\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n    this.loadNapadaci$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadNapadaci), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const napadaciIds = tim.igraciTeren;\n      const igraciRequests = napadaciIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const napadaci = igraci.filter(igrac => igrac.pozicija === 'napad');\n        return TimActions.loadNapadaciSuccess({\n          napadaci\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n  }\n}\n_class2 = IgracEffects;\n_class2.ɵfac = function IgracEffects_Factory(t) {\n  return new (t || _class2)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.FudbalskitimService), i0.ɵɵinject(i4.KorisnikService));\n};\n_class2.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class2,\n  factory: _class2.ɵfac\n});","map":{"version":3,"names":["createEffect","ofType","forkJoin","of","catchError","map","mergeMap","switchMap","withLatestFrom","TimActions","IgracActions","fromApp","select","selectIgraciTransferLista","selectTrenutniKorisnik","TimEffects","constructor","actions$","fudbalskiTimService","store","korisnikService","addIgracToZamene$","pipe","addIgracToZamene","action","dodajIgracaZamenama","igracId","timId","addIgracToZameneSuccess","addIgracToZameneFailed","addKupljeniIgracURoster$","addKupljeniIgracURoster","dodajIgracaUListuIgraca","kupljeniIgrac","ciljaniTimId","addKupljeniIgracSuccess","azuriraniIdTima","addKupljeniIgracFailed","buyIgrac$","buyIgrac","trenutniKorisnik","igraciTransferLista","buyIgracFailed","igrac","novaCena","virtuelniNovac","cena","ime","id","noviTrenutniKorisnik","updateVirtuelniNovac","buyIgracSuccess","updateTrenutniKorisnik","korisnik","removeIgracFromTransferLista$","removeIgracIzTransferLista","ukloniIgracaSaTransferListe","obrisiIgracIzTransferListaSuccess","obrisiIgracIzTransferListaFailed","updateIgraciTransferLista$","igracIdZaBrisanje","filter","igraci","updateIgraciTransferLista","swapPlayers$","swapPlayers","selectTimState","timState","timID","igracIzlaziId","igracUlaziId","igraciTeren","igraciZamena","trenutniTimID","getIgracById","igracUlazi","updatedIgraciTeren","ocena","updatedIgraciZamena","getTimById","timToUpdate","swapPlayersFailed","error","updateTimIgraci","swapPlayersSuccess","return","loadTimovi$","loadTimovi","getSviTimovi","timovi","loadTimoviSuccess","type","updateTim$","updateTim","tim","updateTimSuccess","getTimById$","loadTimById","loadTimByIdSuccess","i0","ɵɵinject","i1","Actions","i2","FudbalskitimService","i3","Store","i4","KorisnikService","factory","ɵfac","IgracEffects","loadTrenutniKorisnik$","loadTrenutniKorisnik","getKorisnikById","loadTrenutniKorisnikSuccess","loadIgraci$","loadIgraci","getSviIgraci","loadIgraciSuccess","getIgracById$","loadIgracById","igracID","loadIgracByIdSuccess","getIgraciByPozicija$","loadIgraciByPozicija","getIgraciByPozicija","pozicija","loadIgraciByPozicijaSuccess","getIgraciZamena$","loadIgraciZamena","igraciZamenaIds","getIgraciByIds","loadIgraciZamenaSuccess","getIgraciTeren$","loadIgraciTeren","igraciTerenIds","loadIgraciTerenSuccess","loadGolmani$","loadGolmani","golmaniIds","igraciRequests","golmani","loadGolmaniSuccess","loadOdbrambeni$","loadOdbrambeni","odbrambeniIds","odbrambeni","loadOdbrambeniSuccess","loadVeznjaci$","loadVeznjaci","veznjaciIds","veznjaci","loadVeznjaciSuccess","loadNapadaci$","loadNapadaci","napadaciIds","napadaci","loadNapadaciSuccess"],"sources":["D:\\OneDrive\\OneDrive - Faculty of Electronic Engineering\\Radna površina\\AngularProjekat\\src\\app\\store\\igrac.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Observable, forkJoin, of } from 'rxjs';\r\nimport { catchError, map, mergeMap, switchMap, withLatestFrom } from 'rxjs/operators';\r\nimport { FudbalskitimService } from '../services/fudbalskitim.service';\r\nimport * as TimActions from 'src/app/store/igrac.action';\r\nimport * as IgracActions from 'src/app/store/igrac.action';\r\nimport { Igrac } from '../models/igrac';\r\nimport * as fromApp from './igrac.selector';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { selectIgraciTeren, selectIgraciTransferLista, selectIgraciZamena, selectSveState, selectTimState, selectTrenutniKorisnik } from './igrac.selector';\r\nimport { AppState } from '../app.state';\r\nimport { KorisnikService } from '../services/korisnik.service';\r\n\r\n@Injectable()\r\nexport class TimEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private fudbalskiTimService: FudbalskitimService,\r\n    private store: Store<AppState>,\r\n    private korisnikService: KorisnikService\r\n  ) { }\r\n\r\n  addIgracToZamene$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(IgracActions.addIgracToZamene),\r\n      mergeMap((action) =>\r\n        this.fudbalskiTimService.dodajIgracaZamenama( action.igracId, action.timId).pipe(\r\n          map(() => IgracActions.addIgracToZameneSuccess({  igracId: action.igracId, timId: action.timId})),\r\n          catchError(() => of(IgracActions.addIgracToZameneFailed()))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  addKupljeniIgracURoster$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(TimActions.addKupljeniIgracURoster),\r\n    switchMap((action) =>\r\n      this.fudbalskiTimService.dodajIgracaUListuIgraca(action.kupljeniIgrac, action.ciljaniTimId).pipe(\r\n        map(() => IgracActions.addKupljeniIgracSuccess({\r\n          kupljeniIgrac: { ...action.kupljeniIgrac, timId: action.ciljaniTimId },\r\n          azuriraniIdTima: action.ciljaniTimId\r\n        })),\r\n        catchError(() => of(IgracActions.addKupljeniIgracFailed()))\r\n      )\r\n    )\r\n  )\r\n);\r\n\r\n  // addKupljeniIgracURoster$ = createEffect(() =>\r\n  //   this.actions$.pipe(\r\n  //     ofType(TimActions.addKupljeniIgracURoster),\r\n  //     mergeMap((action) =>\r\n  //       this.fudbalskiTimService.dodajIgracaZamenama(action.kupljeniIgrac.id, action.ciljaniTimId).pipe(\r\n  //         map(() => IgracActions.addKupljeniIgracSuccess({\r\n  //           kupljeniIgrac: { ...action.kupljeniIgrac, timId: action.ciljaniTimId },\r\n  //           azuriraniIdTima: action.ciljaniTimId\r\n  //         })),\r\n  //         catchError(() => of(IgracActions.addKupljeniIgracFailed()))\r\n  //       )\r\n  //     )\r\n  //   )\r\n  // );\r\n\r\n  buyIgrac$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(TimActions.buyIgrac),\r\n    withLatestFrom(\r\n      this.store.select(selectTrenutniKorisnik),\r\n      this.store.select(selectIgraciTransferLista)\r\n    ),\r\n    mergeMap(([action, trenutniKorisnik, igraciTransferLista]) => {\r\n      if (!trenutniKorisnik) {\r\n        return of(IgracActions.buyIgracFailed()); // Ako trenutniKorisnik nije definisan\r\n      }\r\n\r\n      const igrac = action.igrac;\r\n      const novaCena = trenutniKorisnik.virtuelniNovac - igrac.cena;\r\n      const ime = trenutniKorisnik.ime;\r\n      const id = trenutniKorisnik.id;\r\n\r\n      if (novaCena < 0) {\r\n        return of(IgracActions.buyIgracFailed());\r\n      }\r\n\r\n      const noviTrenutniKorisnik = {\r\n        ...trenutniKorisnik,\r\n        ime:ime,\r\n        id:id,\r\n        virtuelniNovac: novaCena,\r\n      };\r\n\r\n      return this.korisnikService\r\n        .updateVirtuelniNovac(noviTrenutniKorisnik.id, noviTrenutniKorisnik.ime, noviTrenutniKorisnik.virtuelniNovac, noviTrenutniKorisnik.timId)\r\n        .pipe(\r\n          switchMap(() => [\r\n            IgracActions.buyIgracSuccess({ igrac }),\r\n            IgracActions.updateTrenutniKorisnik({ korisnik: noviTrenutniKorisnik }),\r\n          ])\r\n        );\r\n    })\r\n  )\r\n);\r\n\r\nremoveIgracFromTransferLista$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(IgracActions.removeIgracIzTransferLista),\r\n    mergeMap((action) =>\r\n      this.fudbalskiTimService.ukloniIgracaSaTransferListe(action.igracId).pipe(\r\n        map(() => IgracActions.obrisiIgracIzTransferListaSuccess({ igracId: action.igracId })),\r\n        catchError(() => of(IgracActions.obrisiIgracIzTransferListaFailed()))\r\n      )\r\n    )\r\n  )\r\n);\r\n\r\nupdateIgraciTransferLista$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(IgracActions.obrisiIgracIzTransferListaSuccess),\r\n    withLatestFrom(this.store.select(selectIgraciTransferLista)),\r\n    map(([action, igraciTransferLista]) => {\r\n      const igracIdZaBrisanje = action.igracId;\r\n      return igraciTransferLista.filter(igrac => igrac.id !== igracIdZaBrisanje);\r\n    }),\r\n    map(igraci => IgracActions.updateIgraciTransferLista({ igraci }))\r\n  )\r\n);\r\n\r\n\r\n  swapPlayers$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(TimActions.swapPlayers),\r\n    withLatestFrom(this.store.pipe(select(fromApp.selectTimState))),\r\n    switchMap(([action, timState]) => {\r\n      const { timID, igracIzlaziId, igracUlaziId } = action;\r\n      const { igraciTeren, igraciZamena, trenutniTimID } = timState;\r\n\r\n      if (igracIzlaziId !== null && igracUlaziId !== null) {\r\n        \r\n        return this.fudbalskiTimService.getIgracById(igracUlaziId).pipe(\r\n          mergeMap(igracUlazi => {\r\n            // Ovde koristite informacije o igraču koji ulazi, npr. igracUlazi.ime, igracUlazi.ocena, itd.\r\n      \r\n            // Kreiraj ažuriranu listu igracaTeren i igracaZamena na osnovu zamene\r\n            const updatedIgraciTeren = igraciTeren.map(igrac => {\r\n              if (igrac.id === igracIzlaziId) {\r\n                return { ...igrac, id: igracUlaziId, ime: igracUlazi.ime, ocena: igracUlazi.ocena };\r\n              }\r\n              return igrac;\r\n            });\r\n            \r\n            const updatedIgraciZamena = igraciZamena.map(igrac => {\r\n              if (igrac.id === igracUlaziId) {\r\n                return { ...igrac, id: igracIzlaziId, ime: igracUlazi.ime, ocena: igracUlazi.ocena };\r\n              }\r\n              return igrac;\r\n            });\r\n\r\n        return this.fudbalskiTimService.getTimById(timID).pipe(\r\n          switchMap(timToUpdate => {\r\n            if (!timToUpdate) {\r\n              return of(TimActions.swapPlayersFailed({ error: 'Tim not found' })); // Vratite EMPTY observable ako tim nije pronađen\r\n            }\r\n\r\n            // Logika za zamenu igrača\r\n\r\n            return this.fudbalskiTimService.updateTimIgraci(\r\n              timID,\r\n              updatedIgraciTeren.map(igrac => igrac.id),\r\n              updatedIgraciZamena.map(igrac => igrac.id),\r\n              timToUpdate\r\n            ).pipe(\r\n              map(() => TimActions.swapPlayersSuccess({ igraciTeren: updatedIgraciTeren, igraciZamena: updatedIgraciZamena })),\r\n              catchError(error => of(TimActions.swapPlayersFailed({ error: 'Error updating igrači' }))) // Akcija za rukovanje greškom\r\n            );\r\n          }),\r\n        );\r\n      } else {\r\n        // Vratite EMPTY observable ako nisu ispunjeni uslovi za zamenu\r\n        return of(TimActions.swapPlayersFailed({ error: 'Error updating igrači' }))\r\n      }\r\n    })\r\n  )\r\n);\r\n\r\n\r\n  loadTimovi$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadTimovi),\r\n      mergeMap(() =>\r\n        this.fudbalskiTimService.getSviTimovi()\r\n          .pipe(\r\n            map(timovi => TimActions.loadTimoviSuccess({ timovi })),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  updateTim$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.updateTim),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.updateTimIgraci(\r\n          action.timId, action.igraciTeren, action.igraciZamena, action.tim\r\n        )\r\n          .pipe(\r\n            map(() => TimActions.updateTimSuccess()),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  getTimById$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadTimById),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          map(tim => {\r\n            const igraciTeren = tim.igraciTeren;\r\n            const igraciZamena = tim.igraciZamena;\r\n            return TimActions.loadTimByIdSuccess({\r\n              tim,\r\n              igraciTeren, igraciZamena\r\n            });\r\n          }),\r\n          catchError(() => of({ type: 'load error' }))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n\r\n}\r\n\r\n@Injectable()\r\nexport class IgracEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private fudbalskiTimService: FudbalskitimService,\r\n    private korisnikService: KorisnikService\r\n  ) { }\r\n\r\n  loadTrenutniKorisnik$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(IgracActions.loadTrenutniKorisnik), // Pretpostavljeno ime akcije\r\n      mergeMap(() =>\r\n        this.korisnikService.getKorisnikById(1).pipe( // Pretpostavljeno korisnikId\r\n          map(korisnik => IgracActions.loadTrenutniKorisnikSuccess({ korisnik })),\r\n          catchError(() => of({ type: 'Load Korisnik Failed' }))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n\r\n  loadIgraci$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(IgracActions.loadIgraci),\r\n      mergeMap(() =>\r\n        this.fudbalskiTimService.getSviIgraci()\r\n          .pipe(\r\n            map(igraci => IgracActions.loadIgraciSuccess({ igraci })),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgracById$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(IgracActions.loadIgracById),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getIgracById(action.igracID).pipe(\r\n          map(igrac => IgracActions.loadIgracByIdSuccess({ igrac })),\r\n          catchError(() => of({ type: 'load error' }))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgraciByPozicija$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadIgraciByPozicija),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getIgraciByPozicija(action.pozicija, action.timID).pipe(\r\n          map(igraci => IgracActions.loadIgraciByPozicijaSuccess({ igraci })),\r\n          catchError(() => of({ type: 'load error' }))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgraciZamena$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadIgraciZamena),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          map(tim => tim.igraciZamena),\r\n          switchMap(igraciZamenaIds =>\r\n            this.fudbalskiTimService.getIgraciByIds(igraciZamenaIds).pipe(\r\n              map(igraciZamena => TimActions.loadIgraciZamenaSuccess({ igraciZamena })),\r\n              catchError(() => of({ type: 'load error' }))\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgraciTeren$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadIgraciTeren),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          map(tim => tim.igraciTeren),\r\n          switchMap(igraciTerenIds =>\r\n            this.fudbalskiTimService.getIgraciByIds(igraciTerenIds).pipe(\r\n              map(igraciTeren => TimActions.loadIgraciTerenSuccess({ igraciTeren })),\r\n              catchError(() => of({ type: 'load error' }))\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadGolmani$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadGolmani),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          switchMap((tim: any) => {\r\n            const golmaniIds: number[] = tim.igraciTeren;\r\n            const igraciRequests: Observable<Igrac>[] = golmaniIds.map((id: number) =>\r\n              this.fudbalskiTimService.getIgracById(id)\r\n            );\r\n\r\n            return forkJoin(igraciRequests).pipe(\r\n              map((igraci: Igrac[]) => {\r\n                const golmani: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'golman');\r\n                return TimActions.loadGolmaniSuccess({ golmani });\r\n              }),\r\n              catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n            );\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadOdbrambeni$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadOdbrambeni),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          switchMap((tim: any) => {\r\n            const odbrambeniIds: number[] = tim.igraciTeren;\r\n            const igraciRequests: Observable<Igrac>[] = odbrambeniIds.map((id: number) =>\r\n              this.fudbalskiTimService.getIgracById(id)\r\n            );\r\n\r\n            return forkJoin(igraciRequests).pipe(\r\n              map((igraci: Igrac[]) => {\r\n                const odbrambeni: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'odbrana');\r\n                return TimActions.loadOdbrambeniSuccess({ odbrambeni });\r\n              }),\r\n              catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n            );\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadVeznjaci$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadVeznjaci),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          switchMap((tim: any) => {\r\n            const veznjaciIds: number[] = tim.igraciTeren;\r\n            const igraciRequests: Observable<Igrac>[] = veznjaciIds.map((id: number) =>\r\n              this.fudbalskiTimService.getIgracById(id)\r\n            );\r\n\r\n            return forkJoin(igraciRequests).pipe(\r\n              map((igraci: Igrac[]) => {\r\n                const veznjaci: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'sredina');\r\n                return TimActions.loadVeznjaciSuccess({ veznjaci });\r\n              }),\r\n              catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n            );\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadNapadaci$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadNapadaci),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          switchMap((tim: any) => {\r\n            const napadaciIds: number[] = tim.igraciTeren;\r\n            const igraciRequests: Observable<Igrac>[] = napadaciIds.map((id: number) =>\r\n              this.fudbalskiTimService.getIgracById(id)\r\n            );\r\n\r\n            return forkJoin(igraciRequests).pipe(\r\n              map((igraci: Igrac[]) => {\r\n                const napadaci: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'napad');\r\n                return TimActions.loadNapadaciSuccess({ napadaci });\r\n              }),\r\n              catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n            );\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}