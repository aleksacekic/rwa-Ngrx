{"ast":null,"code":"var _class, _class2;\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { forkJoin, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap, withLatestFrom } from 'rxjs/operators';\nimport * as TimActions from 'src/app/store/igrac.action';\nimport * as IgracActions from 'src/app/store/igrac.action';\nimport * as fromApp from './igrac.selector';\nimport { select } from '@ngrx/store';\nimport { selectIgraciTransferLista, selectTrenutniKorisnik } from './igrac.selector';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/fudbalskitim.service\";\nimport * as i3 from \"@ngrx/store\";\nimport * as i4 from \"../services/korisnik.service\";\nexport class TimEffects {\n  constructor(actions$, fudbalskiTimService, store, korisnikService) {\n    this.actions$ = actions$;\n    this.fudbalskiTimService = fudbalskiTimService;\n    this.store = store;\n    this.korisnikService = korisnikService;\n    this.buyIgrac$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.buyIgrac), withLatestFrom(this.store.select(selectTrenutniKorisnik), this.store.select(selectIgraciTransferLista)), mergeMap(([action, trenutniKorisnik, igraciTransferLista]) => {\n      if (trenutniKorisnik) {\n        const igrac = action.igrac;\n        const novaCena = trenutniKorisnik.virtuelniNovac - igrac.cena;\n        if (novaCena < 0) {\n          return of(IgracActions.buyIgracFailed());\n        }\n        const noviTrenutniKorisnik = {\n          ...trenutniKorisnik,\n          virtuelniNovac: novaCena\n        };\n        return this.korisnikService.updateVirtuelniNovac(noviTrenutniKorisnik.id, noviTrenutniKorisnik.virtuelniNovac).pipe(switchMap(() => [IgracActions.buyIgracSuccess({\n          igrac\n        }), IgracActions.updateTrenutniKorisnik({\n          korisnik: noviTrenutniKorisnik\n        })]));\n      }\n    })));\n  }\n}\n_class = TimEffects;\n_class.ɵfac = function TimEffects_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.FudbalskitimService), i0.ɵɵinject(i3.Store), i0.ɵɵinject(i4.KorisnikService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});\n;\nswapPlayers$ = createEffect(() => this.actions$.pipe(ofType(TimActions.swapPlayers), withLatestFrom(this.store.pipe(select(fromApp.selectTimState))), switchMap(([action, timState]) => {\n  const {\n    timID,\n    igracIzlaziId,\n    igracUlaziId\n  } = action;\n  const {\n    igraciTeren,\n    igraciZamena,\n    trenutniTimID\n  } = timState;\n  if (igracIzlaziId !== null && igracUlaziId !== null) {\n    // Kreiraj ažuriranu listu igracaTeren i igracaZamena na osnovu zamene\n    const updatedIgraciTeren = igraciTeren.map(igrac => {\n      if (igrac.id === igracIzlaziId) {\n        console.log(igraciTeren);\n        return {\n          ...igrac,\n          id: igracUlaziId\n        };\n      }\n      return igrac;\n    });\n    const updatedIgraciZamena = igraciZamena.map(igrac => {\n      if (igrac.id === igracUlaziId) {\n        return {\n          ...igrac,\n          id: igracIzlaziId\n        };\n      }\n      return igrac;\n    });\n    return this.fudbalskiTimService.getTimById(timID).pipe(switchMap(timToUpdate => {\n      if (!timToUpdate) {\n        return of(TimActions.swapPlayersFailed({\n          error: 'Tim not found'\n        })); // Vratite EMPTY observable ako tim nije pronađen\n      }\n      // Logika za zamenu igrača\n      return this.fudbalskiTimService.updateTimIgraci(timID, updatedIgraciTeren.map(igrac => igrac.id), updatedIgraciZamena.map(igrac => igrac.id), timToUpdate).pipe(map(() => TimActions.swapPlayersSuccess({\n        igraciTeren: updatedIgraciTeren,\n        igraciZamena: updatedIgraciZamena\n      })), catchError(error => of(TimActions.swapPlayersFailed({\n        error: 'Error updating igrači'\n      }))) // Akcija za rukovanje greškom\n      );\n    }));\n  } else {\n    // Vratite EMPTY observable ako nisu ispunjeni uslovi za zamenu\n    return of(TimActions.swapPlayersFailed({\n      error: 'Error updating igrači'\n    }));\n  }\n})));\nloadTimovi$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadTimovi), mergeMap(() => this.fudbalskiTimService.getSviTimovi().pipe(map(timovi => TimActions.loadTimoviSuccess({\n  timovi\n})), catchError(() => of({\n  type: 'load error'\n}))))));\nupdateTim$ = createEffect(() => this.actions$.pipe(ofType(TimActions.updateTim), mergeMap(action => this.fudbalskiTimService.updateTimIgraci(action.timId, action.igraciTeren, action.igraciZamena, action.tim).pipe(map(() => TimActions.updateTimSuccess()), catchError(() => of({\n  type: 'load error'\n}))))));\ngetTimById$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadTimById), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(map(tim => {\n  const igraciTeren = tim.igraciTeren;\n  const igraciZamena = tim.igraciZamena;\n  return TimActions.loadTimByIdSuccess({\n    tim,\n    igraciTeren,\n    igraciZamena\n  });\n}), catchError(() => of({\n  type: 'load error'\n}))))));\nexport class IgracEffects {\n  constructor(actions$, fudbalskiTimService) {\n    this.actions$ = actions$;\n    this.fudbalskiTimService = fudbalskiTimService;\n    this.loadIgraci$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.loadIgraci), mergeMap(() => this.fudbalskiTimService.getSviIgraci().pipe(map(igraci => IgracActions.loadIgraciSuccess({\n      igraci\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getIgracById$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.loadIgracById), mergeMap(action => this.fudbalskiTimService.getIgracById(action.igracID).pipe(map(igrac => IgracActions.loadIgracByIdSuccess({\n      igrac\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getIgraciByPozicija$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadIgraciByPozicija), mergeMap(action => this.fudbalskiTimService.getIgraciByPozicija(action.pozicija, action.timID).pipe(map(igraci => IgracActions.loadIgraciByPozicijaSuccess({\n      igraci\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getIgraciZamena$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadIgraciZamena), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(map(tim => tim.igraciZamena), switchMap(igraciZamenaIds => this.fudbalskiTimService.getIgraciByIds(igraciZamenaIds).pipe(map(igraciZamena => TimActions.loadIgraciZamenaSuccess({\n      igraciZamena\n    })), catchError(() => of({\n      type: 'load error'\n    }))))))));\n    this.getIgraciTeren$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadIgraciTeren), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(map(tim => tim.igraciTeren), switchMap(igraciTerenIds => this.fudbalskiTimService.getIgraciByIds(igraciTerenIds).pipe(map(igraciTeren => TimActions.loadIgraciTerenSuccess({\n      igraciTeren\n    })), catchError(() => of({\n      type: 'load error'\n    }))))))));\n    this.loadGolmani$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadGolmani), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const golmaniIds = tim.igraciTeren;\n      const igraciRequests = golmaniIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const golmani = igraci.filter(igrac => igrac.pozicija === 'golman');\n        return TimActions.loadGolmaniSuccess({\n          golmani\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n    this.loadOdbrambeni$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadOdbrambeni), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const odbrambeniIds = tim.igraciTeren;\n      const igraciRequests = odbrambeniIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const odbrambeni = igraci.filter(igrac => igrac.pozicija === 'odbrana');\n        return TimActions.loadOdbrambeniSuccess({\n          odbrambeni\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n    this.loadVeznjaci$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadVeznjaci), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const veznjaciIds = tim.igraciTeren;\n      const igraciRequests = veznjaciIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const veznjaci = igraci.filter(igrac => igrac.pozicija === 'sredina');\n        return TimActions.loadVeznjaciSuccess({\n          veznjaci\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n    this.loadNapadaci$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadNapadaci), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const napadaciIds = tim.igraciTeren;\n      const igraciRequests = napadaciIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const napadaci = igraci.filter(igrac => igrac.pozicija === 'napad');\n        return TimActions.loadNapadaciSuccess({\n          napadaci\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n  }\n}\n_class2 = IgracEffects;\n_class2.ɵfac = function IgracEffects_Factory(t) {\n  return new (t || _class2)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.FudbalskitimService));\n};\n_class2.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class2,\n  factory: _class2.ɵfac\n});","map":{"version":3,"names":["createEffect","ofType","forkJoin","of","catchError","map","mergeMap","switchMap","withLatestFrom","TimActions","IgracActions","fromApp","select","selectIgraciTransferLista","selectTrenutniKorisnik","TimEffects","constructor","actions$","fudbalskiTimService","store","korisnikService","buyIgrac$","pipe","buyIgrac","action","trenutniKorisnik","igraciTransferLista","igrac","novaCena","virtuelniNovac","cena","buyIgracFailed","noviTrenutniKorisnik","updateVirtuelniNovac","id","buyIgracSuccess","updateTrenutniKorisnik","korisnik","i0","ɵɵinject","i1","Actions","i2","FudbalskitimService","i3","Store","i4","KorisnikService","factory","ɵfac","swapPlayers$","swapPlayers","selectTimState","timState","timID","igracIzlaziId","igracUlaziId","igraciTeren","igraciZamena","trenutniTimID","updatedIgraciTeren","console","log","updatedIgraciZamena","getTimById","timToUpdate","swapPlayersFailed","error","updateTimIgraci","swapPlayersSuccess","loadTimovi$","loadTimovi","getSviTimovi","timovi","loadTimoviSuccess","type","updateTim$","updateTim","timId","tim","updateTimSuccess","getTimById$","loadTimById","loadTimByIdSuccess","IgracEffects","loadIgraci$","loadIgraci","getSviIgraci","igraci","loadIgraciSuccess","getIgracById$","loadIgracById","getIgracById","igracID","loadIgracByIdSuccess","getIgraciByPozicija$","loadIgraciByPozicija","getIgraciByPozicija","pozicija","loadIgraciByPozicijaSuccess","getIgraciZamena$","loadIgraciZamena","igraciZamenaIds","getIgraciByIds","loadIgraciZamenaSuccess","getIgraciTeren$","loadIgraciTeren","igraciTerenIds","loadIgraciTerenSuccess","loadGolmani$","loadGolmani","golmaniIds","igraciRequests","golmani","filter","loadGolmaniSuccess","loadOdbrambeni$","loadOdbrambeni","odbrambeniIds","odbrambeni","loadOdbrambeniSuccess","loadVeznjaci$","loadVeznjaci","veznjaciIds","veznjaci","loadVeznjaciSuccess","loadNapadaci$","loadNapadaci","napadaciIds","napadaci","loadNapadaciSuccess"],"sources":["D:\\OneDrive\\OneDrive - Faculty of Electronic Engineering\\Radna površina\\AngularProjekat\\src\\app\\store\\igrac.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Observable, forkJoin, of } from 'rxjs';\r\nimport { catchError, map, mergeMap, switchMap, withLatestFrom } from 'rxjs/operators';\r\nimport { FudbalskitimService } from '../services/fudbalskitim.service';\r\nimport * as TimActions from 'src/app/store/igrac.action';\r\nimport * as IgracActions from 'src/app/store/igrac.action';\r\nimport { Igrac } from '../models/igrac';\r\nimport * as fromApp from './igrac.selector';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { selectIgraciTeren, selectIgraciTransferLista, selectIgraciZamena, selectSveState, selectTimState, selectTrenutniKorisnik } from './igrac.selector';\r\nimport { AppState } from '../app.state';\r\nimport { KorisnikService } from '../services/korisnik.service';\r\n\r\n@Injectable()\r\nexport class TimEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private fudbalskiTimService: FudbalskitimService,\r\n    private store: Store<AppState>,\r\n    private korisnikService: KorisnikService\r\n  ) { }\r\n\r\n  buyIgrac$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(IgracActions.buyIgrac),\r\n      withLatestFrom(\r\n        this.store.select(selectTrenutniKorisnik),\r\n        this.store.select(selectIgraciTransferLista)\r\n      ),\r\n      mergeMap(([action, trenutniKorisnik, igraciTransferLista]) => {\r\n        if(trenutniKorisnik)\r\n        {\r\n          const igrac = action.igrac;\r\n        const novaCena = trenutniKorisnik.virtuelniNovac - igrac.cena;\r\n\r\n        if (novaCena < 0) {\r\n          return of(IgracActions.buyIgracFailed());\r\n        }\r\n\r\n        const noviTrenutniKorisnik = {\r\n          ...trenutniKorisnik,\r\n          virtuelniNovac: novaCena,\r\n        };\r\n\r\n        return this.korisnikService\r\n          .updateVirtuelniNovac(noviTrenutniKorisnik.id, noviTrenutniKorisnik.virtuelniNovac)\r\n          .pipe(\r\n            switchMap(() => [\r\n              IgracActions.buyIgracSuccess({ igrac }),\r\n              IgracActions.updateTrenutniKorisnik({ korisnik: noviTrenutniKorisnik }),\r\n            ])\r\n          );\r\n      })\r\n        }\r\n        \r\n\r\n        \r\n    )\r\n  );\r\n\r\n  swapPlayers$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(TimActions.swapPlayers),\r\n    withLatestFrom(this.store.pipe(select(fromApp.selectTimState))),\r\n    switchMap(([action, timState]) => {\r\n      const { timID, igracIzlaziId, igracUlaziId } = action;\r\n      const { igraciTeren, igraciZamena, trenutniTimID } = timState;\r\n\r\n      if (igracIzlaziId !== null && igracUlaziId !== null) {\r\n        \r\n        // Kreiraj ažuriranu listu igracaTeren i igracaZamena na osnovu zamene\r\n        const updatedIgraciTeren = igraciTeren.map(igrac => {\r\n          if (igrac.id === igracIzlaziId) {\r\n            console.log(igraciTeren);\r\n            return { ...igrac, id: igracUlaziId };           \r\n          }\r\n      \r\n          return igrac;\r\n        });\r\n        const updatedIgraciZamena = igraciZamena.map(igrac => {\r\n          if (igrac.id === igracUlaziId) {\r\n            return { ...igrac, id: igracIzlaziId };\r\n          }\r\n          return igrac;\r\n        });\r\n\r\n        return this.fudbalskiTimService.getTimById(timID).pipe(\r\n          switchMap(timToUpdate => {\r\n            if (!timToUpdate) {\r\n              return of(TimActions.swapPlayersFailed({ error: 'Tim not found' })); // Vratite EMPTY observable ako tim nije pronađen\r\n            }\r\n\r\n            // Logika za zamenu igrača\r\n\r\n            return this.fudbalskiTimService.updateTimIgraci(\r\n              timID,\r\n              updatedIgraciTeren.map(igrac => igrac.id),\r\n              updatedIgraciZamena.map(igrac => igrac.id),\r\n              timToUpdate\r\n            ).pipe(\r\n              map(() => TimActions.swapPlayersSuccess({ igraciTeren: updatedIgraciTeren, igraciZamena: updatedIgraciZamena })),\r\n              catchError(error => of(TimActions.swapPlayersFailed({ error: 'Error updating igrači' }))) // Akcija za rukovanje greškom\r\n            );\r\n          }),\r\n        );\r\n      } else {\r\n        // Vratite EMPTY observable ako nisu ispunjeni uslovi za zamenu\r\n        return of(TimActions.swapPlayersFailed({ error: 'Error updating igrači' }))\r\n      }\r\n    })\r\n  )\r\n);\r\n\r\n\r\n  loadTimovi$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadTimovi),\r\n      mergeMap(() =>\r\n        this.fudbalskiTimService.getSviTimovi()\r\n          .pipe(\r\n            map(timovi => TimActions.loadTimoviSuccess({ timovi })),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  updateTim$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.updateTim),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.updateTimIgraci(\r\n          action.timId, action.igraciTeren, action.igraciZamena, action.tim\r\n        )\r\n          .pipe(\r\n            map(() => TimActions.updateTimSuccess()),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  getTimById$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadTimById),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          map(tim => {\r\n            const igraciTeren = tim.igraciTeren;\r\n            const igraciZamena = tim.igraciZamena;\r\n            return TimActions.loadTimByIdSuccess({\r\n              tim,\r\n              igraciTeren, igraciZamena\r\n            });\r\n          }),\r\n          catchError(() => of({ type: 'load error' }))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n\r\n}\r\n\r\n@Injectable()\r\nexport class IgracEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private fudbalskiTimService: FudbalskitimService\r\n  ) { }\r\n\r\n  loadIgraci$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(IgracActions.loadIgraci),\r\n      mergeMap(() =>\r\n        this.fudbalskiTimService.getSviIgraci()\r\n          .pipe(\r\n            map(igraci => IgracActions.loadIgraciSuccess({ igraci })),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgracById$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(IgracActions.loadIgracById),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getIgracById(action.igracID).pipe(\r\n          map(igrac => IgracActions.loadIgracByIdSuccess({ igrac })),\r\n          catchError(() => of({ type: 'load error' }))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgraciByPozicija$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadIgraciByPozicija),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getIgraciByPozicija(action.pozicija, action.timID).pipe(\r\n          map(igraci => IgracActions.loadIgraciByPozicijaSuccess({ igraci })),\r\n          catchError(() => of({ type: 'load error' }))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgraciZamena$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadIgraciZamena),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          map(tim => tim.igraciZamena),\r\n          switchMap(igraciZamenaIds =>\r\n            this.fudbalskiTimService.getIgraciByIds(igraciZamenaIds).pipe(\r\n              map(igraciZamena => TimActions.loadIgraciZamenaSuccess({ igraciZamena })),\r\n              catchError(() => of({ type: 'load error' }))\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgraciTeren$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadIgraciTeren),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          map(tim => tim.igraciTeren),\r\n          switchMap(igraciTerenIds =>\r\n            this.fudbalskiTimService.getIgraciByIds(igraciTerenIds).pipe(\r\n              map(igraciTeren => TimActions.loadIgraciTerenSuccess({ igraciTeren })),\r\n              catchError(() => of({ type: 'load error' }))\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadGolmani$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadGolmani),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          switchMap((tim: any) => {\r\n            const golmaniIds: number[] = tim.igraciTeren;\r\n            const igraciRequests: Observable<Igrac>[] = golmaniIds.map((id: number) =>\r\n              this.fudbalskiTimService.getIgracById(id)\r\n            );\r\n\r\n            return forkJoin(igraciRequests).pipe(\r\n              map((igraci: Igrac[]) => {\r\n                const golmani: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'golman');\r\n                return TimActions.loadGolmaniSuccess({ golmani });\r\n              }),\r\n              catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n            );\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadOdbrambeni$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadOdbrambeni),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          switchMap((tim: any) => {\r\n            const odbrambeniIds: number[] = tim.igraciTeren;\r\n            const igraciRequests: Observable<Igrac>[] = odbrambeniIds.map((id: number) =>\r\n              this.fudbalskiTimService.getIgracById(id)\r\n            );\r\n\r\n            return forkJoin(igraciRequests).pipe(\r\n              map((igraci: Igrac[]) => {\r\n                const odbrambeni: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'odbrana');\r\n                return TimActions.loadOdbrambeniSuccess({ odbrambeni });\r\n              }),\r\n              catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n            );\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadVeznjaci$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadVeznjaci),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          switchMap((tim: any) => {\r\n            const veznjaciIds: number[] = tim.igraciTeren;\r\n            const igraciRequests: Observable<Igrac>[] = veznjaciIds.map((id: number) =>\r\n              this.fudbalskiTimService.getIgracById(id)\r\n            );\r\n\r\n            return forkJoin(igraciRequests).pipe(\r\n              map((igraci: Igrac[]) => {\r\n                const veznjaci: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'sredina');\r\n                return TimActions.loadVeznjaciSuccess({ veznjaci });\r\n              }),\r\n              catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n            );\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadNapadaci$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadNapadaci),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          switchMap((tim: any) => {\r\n            const napadaciIds: number[] = tim.igraciTeren;\r\n            const igraciRequests: Observable<Igrac>[] = napadaciIds.map((id: number) =>\r\n              this.fudbalskiTimService.getIgracById(id)\r\n            );\r\n\r\n            return forkJoin(igraciRequests).pipe(\r\n              map((igraci: Igrac[]) => {\r\n                const napadaci: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'napad');\r\n                return TimActions.loadNapadaciSuccess({ napadaci });\r\n              }),\r\n              catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n            );\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}