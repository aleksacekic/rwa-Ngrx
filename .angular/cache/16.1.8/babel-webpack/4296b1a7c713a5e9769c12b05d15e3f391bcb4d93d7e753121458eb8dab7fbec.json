{"ast":null,"code":"var _class, _class2;\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { forkJoin, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap, withLatestFrom } from 'rxjs/operators';\nimport * as TimActions from 'src/app/store/igrac.action';\nimport * as IgracActions from 'src/app/store/igrac.action';\nimport * as fromApp from './igrac.selector';\nimport { select } from '@ngrx/store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/fudbalskitim.service\";\nimport * as i3 from \"@ngrx/store\";\nexport class TimEffects {\n  constructor(actions$, fudbalskiTimService, store) {\n    this.actions$ = actions$;\n    this.fudbalskiTimService = fudbalskiTimService;\n    this.store = store;\n    this.swapPlayers$ = createEffect(() => this.actions$.pipe(ofType(TimActions.swapPlayers), withLatestFrom(this.store.pipe(select(fromApp.selectTimState))), switchMap(([action, timState]) => {\n      const {\n        timID,\n        igracIzlaziId,\n        igracUlaziId\n      } = action;\n      const {\n        igraciTeren,\n        igraciZamena,\n        trenutniTimID\n      } = timState;\n      if (igracIzlaziId !== null && igracUlaziId !== null) {\n        // Kreiraj ažuriranu listu igracaTeren i igracaZamena na osnovu zamene\n        const updatedIgraciTeren = igraciTeren.map(igrac => {\n          if (igrac.id === igracIzlaziId) {\n            return {\n              ...igrac,\n              id: igracUlaziId\n            };\n          }\n          return igrac;\n        });\n        const updatedIgraciZamena = igraciZamena.map(igrac => {\n          if (igrac.id === igracUlaziId) {\n            return {\n              ...igrac,\n              id: igracIzlaziId\n            };\n          }\n          return igrac;\n        });\n        return this.fudbalskiTimService.getTimById(timID).pipe(switchMap(timToUpdate => {\n          if (!timToUpdate) {\n            return of({\n              type: 'TimNotFound'\n            }); // Vratite EMPTY observable ako tim nije pronađen\n          }\n          // Logika za zamenu igrača\n          return this.fudbalskiTimService.updateTimIgraci(timID, updatedIgraciTeren.map(igrac => igrac.id), updatedIgraciZamena.map(igrac => igrac.id), timToUpdate).pipe(map(() => TimActions.swapPlayersSuccess({\n            igraciTeren: updatedIgraciTeren,\n            igraciZamena: updatedIgraciZamena\n          })), catchError(error => of({\n            type: 'Swap players failed',\n            error\n          })) // Možete prilagoditi ovaj deo za rukovanje greškom\n          );\n        }));\n      }\n    })));\n\n    this.loadTimovi$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadTimovi), mergeMap(() => this.fudbalskiTimService.getSviTimovi().pipe(map(timovi => TimActions.loadTimoviSuccess({\n      timovi\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.updateTim$ = createEffect(() => this.actions$.pipe(ofType(TimActions.updateTim), mergeMap(action => this.fudbalskiTimService.updateTimIgraci(action.timId, action.igraciTeren, action.igraciZamena, action.tim).pipe(map(() => TimActions.updateTimSuccess()), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getTimById$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadTimById), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(map(tim => {\n      const igraciTeren = tim.igraciTeren;\n      const igraciZamena = tim.igraciZamena;\n      return TimActions.loadTimByIdSuccess({\n        tim,\n        igraciTeren,\n        igraciZamena\n      });\n    }), catchError(() => of({\n      type: 'load error'\n    }))))));\n  }\n}\n_class = TimEffects;\n_class.ɵfac = function TimEffects_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.FudbalskitimService), i0.ɵɵinject(i3.Store));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});\nexport class IgracEffects {\n  constructor(actions$, fudbalskiTimService) {\n    this.actions$ = actions$;\n    this.fudbalskiTimService = fudbalskiTimService;\n    this.loadIgraci$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.loadIgraci), mergeMap(() => this.fudbalskiTimService.getSviIgraci().pipe(map(igraci => IgracActions.loadIgraciSuccess({\n      igraci\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getIgracById$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.loadIgracById), mergeMap(action => this.fudbalskiTimService.getIgracById(action.igracID).pipe(map(igrac => IgracActions.loadIgracByIdSuccess({\n      igrac\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getIgraciByPozicija$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadIgraciByPozicija), mergeMap(action => this.fudbalskiTimService.getIgraciByPozicija(action.pozicija, action.timID).pipe(map(igraci => IgracActions.loadIgraciByPozicijaSuccess({\n      igraci\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getIgraciZamena$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadIgraciZamena), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(map(tim => tim.igraciZamena), switchMap(igraciZamenaIds => this.fudbalskiTimService.getIgraciByIds(igraciZamenaIds).pipe(map(igraciZamena => TimActions.loadIgraciZamenaSuccess({\n      igraciZamena\n    })), catchError(() => of({\n      type: 'load error'\n    }))))))));\n    this.getIgraciTeren$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadIgraciTeren), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(map(tim => tim.igraciTeren), switchMap(igraciTerenIds => this.fudbalskiTimService.getIgraciByIds(igraciTerenIds).pipe(map(igraciTeren => TimActions.loadIgraciTerenSuccess({\n      igraciTeren\n    })), catchError(() => of({\n      type: 'load error'\n    }))))))));\n    this.loadGolmani$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadGolmani), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const golmaniIds = tim.igraciTeren;\n      const igraciRequests = golmaniIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const golmani = igraci.filter(igrac => igrac.pozicija === 'golman');\n        return TimActions.loadGolmaniSuccess({\n          golmani\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n    this.loadOdbrambeni$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadOdbrambeni), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const odbrambeniIds = tim.igraciTeren;\n      const igraciRequests = odbrambeniIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const odbrambeni = igraci.filter(igrac => igrac.pozicija === 'odbrana');\n        return TimActions.loadOdbrambeniSuccess({\n          odbrambeni\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n    this.loadVeznjaci$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadVeznjaci), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const veznjaciIds = tim.igraciTeren;\n      const igraciRequests = veznjaciIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const veznjaci = igraci.filter(igrac => igrac.pozicija === 'sredina');\n        return TimActions.loadVeznjaciSuccess({\n          veznjaci\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n    this.loadNapadaci$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadNapadaci), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const napadaciIds = tim.igraciTeren;\n      const igraciRequests = napadaciIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const napadaci = igraci.filter(igrac => igrac.pozicija === 'sredina');\n        return TimActions.loadNapadaciSuccess({\n          napadaci\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n  }\n}\n_class2 = IgracEffects;\n_class2.ɵfac = function IgracEffects_Factory(t) {\n  return new (t || _class2)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.FudbalskitimService));\n};\n_class2.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class2,\n  factory: _class2.ɵfac\n});","map":{"version":3,"names":["createEffect","ofType","forkJoin","of","catchError","map","mergeMap","switchMap","withLatestFrom","TimActions","IgracActions","fromApp","select","TimEffects","constructor","actions$","fudbalskiTimService","store","swapPlayers$","pipe","swapPlayers","selectTimState","action","timState","timID","igracIzlaziId","igracUlaziId","igraciTeren","igraciZamena","trenutniTimID","updatedIgraciTeren","igrac","id","updatedIgraciZamena","getTimById","timToUpdate","type","updateTimIgraci","swapPlayersSuccess","error","loadTimovi$","loadTimovi","getSviTimovi","timovi","loadTimoviSuccess","updateTim$","updateTim","timId","tim","updateTimSuccess","getTimById$","loadTimById","loadTimByIdSuccess","i0","ɵɵinject","i1","Actions","i2","FudbalskitimService","i3","Store","factory","ɵfac","IgracEffects","loadIgraci$","loadIgraci","getSviIgraci","igraci","loadIgraciSuccess","getIgracById$","loadIgracById","getIgracById","igracID","loadIgracByIdSuccess","getIgraciByPozicija$","loadIgraciByPozicija","getIgraciByPozicija","pozicija","loadIgraciByPozicijaSuccess","getIgraciZamena$","loadIgraciZamena","igraciZamenaIds","getIgraciByIds","loadIgraciZamenaSuccess","getIgraciTeren$","loadIgraciTeren","igraciTerenIds","loadIgraciTerenSuccess","loadGolmani$","loadGolmani","golmaniIds","igraciRequests","golmani","filter","loadGolmaniSuccess","loadOdbrambeni$","loadOdbrambeni","odbrambeniIds","odbrambeni","loadOdbrambeniSuccess","loadVeznjaci$","loadVeznjaci","veznjaciIds","veznjaci","loadVeznjaciSuccess","loadNapadaci$","loadNapadaci","napadaciIds","napadaci","loadNapadaciSuccess"],"sources":["D:\\OneDrive\\OneDrive - Faculty of Electronic Engineering\\Radna površina\\AngularProjekat\\src\\app\\store\\igrac.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Observable, forkJoin, of } from 'rxjs';\r\nimport { catchError, map, mergeMap, switchMap, withLatestFrom } from 'rxjs/operators';\r\nimport { FudbalskitimService } from '../services/fudbalskitim.service';\r\nimport * as TimActions from 'src/app/store/igrac.action';\r\nimport * as IgracActions from 'src/app/store/igrac.action';\r\nimport { Igrac } from '../models/igrac';\r\nimport * as fromApp from './igrac.selector';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { selectIgraciTeren, selectIgraciZamena, selectSveState, selectTimState } from './igrac.selector';\r\nimport { AppState } from '../app.state';\r\n\r\n@Injectable()\r\nexport class TimEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private fudbalskiTimService: FudbalskitimService,\r\n    private store: Store<AppState>\r\n  ) {}\r\n\r\n  swapPlayers$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.swapPlayers),\r\n      withLatestFrom(this.store.pipe(select(fromApp.selectTimState))),\r\n      switchMap(([action, timState]) => {\r\n        const {timID, igracIzlaziId, igracUlaziId } = action;\r\n        const { igraciTeren, igraciZamena, trenutniTimID } = timState;\r\n\r\n        if (igracIzlaziId !== null && igracUlaziId !== null) {\r\n          // Kreiraj ažuriranu listu igracaTeren i igracaZamena na osnovu zamene\r\n          const updatedIgraciTeren = igraciTeren.map(igrac => {\r\n            if (igrac.id === igracIzlaziId) {\r\n              return { ...igrac, id: igracUlaziId };\r\n            }\r\n            return igrac;\r\n          });\r\n\r\n          const updatedIgraciZamena = igraciZamena.map(igrac => {\r\n            if (igrac.id === igracUlaziId) {\r\n              return { ...igrac, id: igracIzlaziId };\r\n            }\r\n            return igrac;\r\n          });\r\n\r\n          return this.fudbalskiTimService.getTimById(timID).pipe(\r\n            switchMap(timToUpdate => {\r\n              if (!timToUpdate) {\r\n                return of({ type: 'TimNotFound' }); // Vratite EMPTY observable ako tim nije pronađen\r\n              }\r\n    \r\n              // Logika za zamenu igrača\r\n    \r\n              return this.fudbalskiTimService.updateTimIgraci(\r\n                timID,\r\n                updatedIgraciTeren.map(igrac => igrac.id),\r\n                updatedIgraciZamena.map(igrac => igrac.id),\r\n                timToUpdate\r\n              ).pipe(\r\n                map(() => TimActions.swapPlayersSuccess({ igraciTeren: updatedIgraciTeren, igraciZamena: updatedIgraciZamena })),\r\n                catchError(error => of({ type: 'Swap players failed', error })) // Možete prilagoditi ovaj deo za rukovanje greškom\r\n              );\r\n            })\r\n          );\r\n        })\r\n      )\r\n    );\r\n  loadTimovi$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadTimovi),\r\n      mergeMap(() =>\r\n        this.fudbalskiTimService.getSviTimovi()\r\n          .pipe(\r\n            map(timovi => TimActions.loadTimoviSuccess({ timovi })),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  updateTim$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.updateTim),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.updateTimIgraci(\r\n          action.timId, action.igraciTeren, action.igraciZamena, action.tim\r\n        )\r\n          .pipe(\r\n            map(() => TimActions.updateTimSuccess()),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  getTimById$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(TimActions.loadTimById),\r\n    mergeMap(action =>\r\n      this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n        map(tim => {\r\n          const igraciTeren = tim.igraciTeren;\r\n          const igraciZamena = tim.igraciZamena;\r\n          return TimActions.loadTimByIdSuccess({ tim,\r\n             igraciTeren, igraciZamena \r\n            });\r\n        }),\r\n        catchError(() => of({ type: 'load error' }))\r\n      )\r\n    )\r\n  )\r\n);\r\n\r\n   \r\n}\r\n\r\n@Injectable()\r\nexport class IgracEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private fudbalskiTimService: FudbalskitimService\r\n  ) {}\r\n\r\n  loadIgraci$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(IgracActions.loadIgraci),\r\n      mergeMap(() =>\r\n        this.fudbalskiTimService.getSviIgraci()\r\n          .pipe(\r\n            map(igraci => IgracActions.loadIgraciSuccess({ igraci })),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgracById$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(IgracActions.loadIgracById),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getIgracById(action.igracID).pipe(\r\n          map(igrac => IgracActions.loadIgracByIdSuccess({ igrac })),\r\n          catchError(() => of({ type: 'load error' }))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgraciByPozicija$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadIgraciByPozicija),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getIgraciByPozicija(action.pozicija, action.timID).pipe(\r\n          map(igraci => IgracActions.loadIgraciByPozicijaSuccess({ igraci })), \r\n          catchError(() => of({ type: 'load error' }))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgraciZamena$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(TimActions.loadIgraciZamena),\r\n    mergeMap(action =>\r\n      this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n        map(tim => tim.igraciZamena),\r\n        switchMap(igraciZamenaIds => \r\n          this.fudbalskiTimService.getIgraciByIds(igraciZamenaIds).pipe(\r\n            map(igraciZamena => TimActions.loadIgraciZamenaSuccess({ igraciZamena })),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )\r\n);\r\n\r\ngetIgraciTeren$ = createEffect(() =>\r\nthis.actions$.pipe(\r\n  ofType(TimActions.loadIgraciTeren),\r\n  mergeMap(action =>\r\n    this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n      map(tim => tim.igraciTeren),\r\n      switchMap(igraciTerenIds => \r\n        this.fudbalskiTimService.getIgraciByIds(igraciTerenIds).pipe(\r\n          map(igraciTeren => TimActions.loadIgraciTerenSuccess({ igraciTeren })),\r\n          catchError(() => of({ type: 'load error' }))\r\n        )\r\n      )\r\n    )\r\n  )\r\n)\r\n);\r\n\r\nloadGolmani$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(TimActions.loadGolmani),\r\n    mergeMap(action =>\r\n      this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n        switchMap((tim: any) => {\r\n          const golmaniIds: number[] = tim.igraciTeren;\r\n          const igraciRequests: Observable<Igrac>[] = golmaniIds.map((id: number) =>\r\n            this.fudbalskiTimService.getIgracById(id)\r\n          );\r\n\r\n          return forkJoin(igraciRequests).pipe(\r\n            map((igraci: Igrac[]) => {\r\n              const golmani: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'golman');\r\n              return TimActions.loadGolmaniSuccess({ golmani });\r\n            }),\r\n            catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n          );\r\n        })\r\n      )\r\n    )\r\n  )\r\n);\r\n\r\nloadOdbrambeni$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(TimActions.loadOdbrambeni),\r\n    mergeMap(action =>\r\n      this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n        switchMap((tim: any) => {\r\n          const odbrambeniIds: number[] = tim.igraciTeren;\r\n          const igraciRequests: Observable<Igrac>[] = odbrambeniIds.map((id: number) =>\r\n            this.fudbalskiTimService.getIgracById(id)\r\n          );\r\n\r\n          return forkJoin(igraciRequests).pipe(\r\n            map((igraci: Igrac[]) => {\r\n              const odbrambeni: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'odbrana');\r\n              return TimActions.loadOdbrambeniSuccess({ odbrambeni });\r\n            }),\r\n            catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n          );\r\n        })\r\n      )\r\n    )\r\n  )\r\n);\r\n\r\nloadVeznjaci$ = createEffect(() => \r\n  this.actions$.pipe(\r\n    ofType(TimActions.loadVeznjaci),\r\n    mergeMap(action =>\r\n      this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n        switchMap((tim: any) => {\r\n          const veznjaciIds: number[] = tim.igraciTeren;\r\n          const igraciRequests: Observable<Igrac>[] = veznjaciIds.map((id: number) =>\r\n            this.fudbalskiTimService.getIgracById(id)\r\n          );\r\n\r\n          return forkJoin(igraciRequests).pipe(\r\n            map((igraci: Igrac[]) => {\r\n              const veznjaci: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'sredina');\r\n              return TimActions.loadVeznjaciSuccess({ veznjaci });\r\n            }),\r\n            catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n          );\r\n        })\r\n      )\r\n    )\r\n  )\r\n);\r\n\r\nloadNapadaci$ = createEffect(() => \r\n  this.actions$.pipe(\r\n    ofType(TimActions.loadNapadaci),\r\n    mergeMap(action =>\r\n      this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n        switchMap((tim: any) => {\r\n          const napadaciIds: number[] = tim.igraciTeren;\r\n          const igraciRequests: Observable<Igrac>[] = napadaciIds.map((id: number) =>\r\n            this.fudbalskiTimService.getIgracById(id)\r\n          );\r\n\r\n          return forkJoin(igraciRequests).pipe(\r\n            map((igraci: Igrac[]) => {\r\n              const napadaci: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'sredina');\r\n              return TimActions.loadNapadaciSuccess({ napadaci });\r\n            }),\r\n            catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n          );\r\n        })\r\n      )\r\n    )\r\n  )\r\n);\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}