{"ast":null,"code":"var _class, _class2;\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { forkJoin, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap, withLatestFrom } from 'rxjs/operators';\nimport * as TimActions from 'src/app/store/igrac.action';\nimport * as IgracActions from 'src/app/store/igrac.action';\nimport * as fromApp from './igrac.selector';\nimport { select } from '@ngrx/store';\nimport { selectIgraciTransferLista, selectTrenutniKorisnik } from './igrac.selector';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/fudbalskitim.service\";\nimport * as i3 from \"@ngrx/store\";\nimport * as i4 from \"../services/korisnik.service\";\nimport * as i5 from \"../services/auth.service\";\nimport * as i6 from \"../services/jwt.service\";\nexport class TimEffects {\n  constructor(actions$, fudbalskiTimService, store, korisnikService) {\n    this.actions$ = actions$;\n    this.fudbalskiTimService = fudbalskiTimService;\n    this.store = store;\n    this.korisnikService = korisnikService;\n    this.addIgracToZamene$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.addIgracToZamene), mergeMap(action => this.fudbalskiTimService.dodajIgracaZamenama(action.igracId, action.timId).pipe(map(() => IgracActions.addIgracToZameneSuccess({\n      igracId: action.igracId,\n      timId: action.timId\n    })), catchError(() => of(IgracActions.addIgracToZameneFailed()))))));\n    this.addKupljeniIgracURoster$ = createEffect(() => this.actions$.pipe(ofType(TimActions.addKupljeniIgracURoster), switchMap(action => this.fudbalskiTimService.dodajIgracaUListuIgraca(action.kupljeniIgrac, action.ciljaniTimId).pipe(map(() => IgracActions.addKupljeniIgracSuccess({\n      kupljeniIgrac: {\n        ...action.kupljeniIgrac,\n        timId: action.ciljaniTimId\n      },\n      azuriraniIdTima: action.ciljaniTimId\n    })), catchError(() => of(IgracActions.addKupljeniIgracFailed()))))));\n    this.buyIgrac$ = createEffect(() => this.actions$.pipe(ofType(TimActions.buyIgrac), withLatestFrom(this.store.select(selectTrenutniKorisnik), this.store.select(selectIgraciTransferLista)), mergeMap(([action, trenutniKorisnik]) => {\n      if (!trenutniKorisnik) {\n        return of(IgracActions.buyIgracFailed());\n      }\n      const igrac = action.igrac;\n      const novaCena = trenutniKorisnik.virtuelniNovac - igrac.cena;\n      const ime = trenutniKorisnik.ime;\n      const id = trenutniKorisnik.id;\n      if (novaCena < 0) {\n        return of(IgracActions.buyIgracFailed());\n      }\n      const noviTrenutniKorisnik = {\n        ...trenutniKorisnik,\n        ime: ime,\n        id: id,\n        virtuelniNovac: novaCena\n      };\n      return this.korisnikService.updateVirtuelniNovac(noviTrenutniKorisnik.id, noviTrenutniKorisnik.ime, noviTrenutniKorisnik.virtuelniNovac, noviTrenutniKorisnik.timId).pipe(switchMap(() => [IgracActions.buyIgracSuccess({\n        igrac\n      }), IgracActions.updateTrenutniKorisnik({\n        korisnik: noviTrenutniKorisnik\n      })]));\n    })));\n    this.removeIgracFromTransferLista$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.removeIgracIzTransferLista), mergeMap(action => this.fudbalskiTimService.ukloniIgracaSaTransferListe(action.igracId).pipe(map(() => IgracActions.obrisiIgracIzTransferListaSuccess({\n      igracId: action.igracId\n    })), catchError(() => of(IgracActions.obrisiIgracIzTransferListaFailed()))))));\n    this.updateIgraciTransferLista$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.obrisiIgracIzTransferListaSuccess), withLatestFrom(this.store.select(selectIgraciTransferLista)), map(([action, igraciTransferLista]) => {\n      const igracIdZaBrisanje = action.igracId;\n      return igraciTransferLista.filter(igrac => igrac.id !== igracIdZaBrisanje);\n    }), map(igraci => IgracActions.updateIgraciTransferLista({\n      igraci\n    }))));\n    this.swapPlayers$ = createEffect(() => this.actions$.pipe(ofType(TimActions.swapPlayers), withLatestFrom(this.store.pipe(select(fromApp.selectTimState))), switchMap(([action, timState]) => {\n      const {\n        timID,\n        igracIzlaziId,\n        igracUlaziId\n      } = action;\n      const {\n        igraciTeren,\n        igraciZamena,\n        trenutniTimID\n      } = timState;\n      if (igracIzlaziId !== null && igracUlaziId !== null) {\n        const igracIzlazi = igraciTeren.find(igrac => igrac.id === igracIzlaziId);\n        if (!igracIzlazi) {\n          return of(TimActions.swapPlayersFailed({\n            error: 'Igrac za izlaz nije pronadjen'\n          }));\n        }\n        return this.fudbalskiTimService.getIgracById(igracUlaziId).pipe(switchMap(igracUlazi => {\n          const updatedIgraciTeren = igraciTeren.map(igrac => {\n            if (igrac.id === igracIzlaziId) {\n              return {\n                ...igrac,\n                id: igracUlaziId,\n                ime: igracUlazi.ime,\n                ocena: igracUlazi.ocena\n              };\n            }\n            return igrac;\n          });\n          const updatedIgraciZamena = igraciZamena.map(igrac => {\n            if (igrac.id === igracUlaziId) {\n              return {\n                ...igrac,\n                id: igracIzlaziId,\n                ime: igracIzlazi.ime,\n                ocena: igracIzlazi.ocena\n              };\n            }\n            return igrac;\n          });\n          return this.fudbalskiTimService.getTimById(timID).pipe(switchMap(timToUpdate => {\n            if (!timToUpdate) {\n              return of(TimActions.swapPlayersFailed({\n                error: 'Tim not found'\n              }));\n            }\n            return this.fudbalskiTimService.updateTimIgraci(timID, updatedIgraciTeren.map(igrac => igrac.id), updatedIgraciZamena.map(igrac => igrac.id), timToUpdate).pipe(map(() => TimActions.swapPlayersSuccess({\n              igraciTeren: updatedIgraciTeren,\n              igraciZamena: updatedIgraciZamena\n            })), catchError(error => of(TimActions.swapPlayersFailed({\n              error: 'Prvi Error u return'\n            }))));\n          }));\n        }));\n      } else {\n        return of(TimActions.swapPlayersFailed({\n          error: 'Drugi error'\n        }));\n      }\n    })));\n    this.loadTimovi$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadTimovi), mergeMap(() => this.fudbalskiTimService.getSviTimovi().pipe(map(timovi => TimActions.loadTimoviSuccess({\n      timovi\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.updateTim$ = createEffect(() => this.actions$.pipe(ofType(TimActions.updateTim), mergeMap(action => this.fudbalskiTimService.updateTimIgraci(action.timId, action.igraciTeren, action.igraciZamena, action.tim).pipe(map(() => TimActions.updateTimSuccess()), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getTimById$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadTimById), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(map(tim => {\n      const igraciTeren = tim.igraciTeren;\n      const igraciZamena = tim.igraciZamena;\n      return TimActions.loadTimByIdSuccess({\n        tim,\n        igraciTeren,\n        igraciZamena\n      });\n    }), catchError(() => of({\n      type: 'load error'\n    }))))));\n  }\n}\n_class = TimEffects;\n_class.ɵfac = function TimEffects_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.FudbalskitimService), i0.ɵɵinject(i3.Store), i0.ɵɵinject(i4.KorisnikService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});\nexport class IgracEffects {\n  constructor(actions$, fudbalskiTimService, korisnikService, authService, jwtService) {\n    this.actions$ = actions$;\n    this.fudbalskiTimService = fudbalskiTimService;\n    this.korisnikService = korisnikService;\n    this.authService = authService;\n    this.jwtService = jwtService;\n    this.loadTrenutniKorisnik$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.loadTrenutniKorisnik), mergeMap(() => {\n      if (this.authService.isLoggedIn()) {\n        const token = this.jwtService.getToken();\n        if (token) {\n          const decodedToken = atob(token.split('.')[1]);\n          const parsedToken = JSON.parse(decodedToken);\n          const userId = parsedToken.id;\n          return this.korisnikService.getKorisnikById(userId).pipe(map(korisnik => IgracActions.loadTrenutniKorisnikSuccess({\n            korisnik\n          })), catchError(() => of({\n            type: 'Load Korisnik Failed'\n          })));\n        }\n      }\n      return of({\n        type: 'Load Korisnik Failed'\n      });\n    })));\n    this.updateVirtuelniNovac$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.buyIgrac),\n    // Prilagodite akciju na svoju akciju za kupovinu igrača\n    mergeMap(({\n      igrac\n    }) => this.korisnikService.updateVirtuelniNovac(igrac.cena).pipe(\n    // Prilagodite putanju prema vašem servisu za ažuriranje virtuelnog novca\n    map(virtuelniNovac => IgracActions.updateVirtuelniNovac({\n      virtuelniNovac\n    }))))));\n    this.loadIgraci$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.loadIgraci), mergeMap(() => this.fudbalskiTimService.getSviIgraci().pipe(map(igraci => IgracActions.loadIgraciSuccess({\n      igraci\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getIgracById$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.loadIgracById), mergeMap(action => this.fudbalskiTimService.getIgracById(action.igracID).pipe(map(igrac => IgracActions.loadIgracByIdSuccess({\n      igrac\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getIgraciByPozicija$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadIgraciByPozicija), mergeMap(action => this.fudbalskiTimService.getIgraciByPozicija(action.pozicija, action.timID).pipe(map(igraci => IgracActions.loadIgraciByPozicijaSuccess({\n      igraci\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getIgraciZamena$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadIgraciZamena), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(map(tim => tim.igraciZamena), switchMap(igraciZamenaIds => this.fudbalskiTimService.getIgraciByIds(igraciZamenaIds).pipe(map(igraciZamena => TimActions.loadIgraciZamenaSuccess({\n      igraciZamena\n    })), catchError(() => of({\n      type: 'load error'\n    }))))))));\n    this.getIgraciTeren$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadIgraciTeren), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(map(tim => tim.igraciTeren), switchMap(igraciTerenIds => this.fudbalskiTimService.getIgraciByIds(igraciTerenIds).pipe(map(igraciTeren => TimActions.loadIgraciTerenSuccess({\n      igraciTeren\n    })), catchError(() => of({\n      type: 'load error'\n    }))))))));\n    this.loadGolmani$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadGolmani), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const golmaniIds = tim.igraciTeren;\n      const igraciRequests = golmaniIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const golmani = igraci.filter(igrac => igrac.pozicija === 'golman');\n        return TimActions.loadGolmaniSuccess({\n          golmani\n        });\n      }), catchError(error => of({\n        type: 'load error'\n      })));\n    })))));\n    this.loadOdbrambeni$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadOdbrambeni), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const odbrambeniIds = tim.igraciTeren;\n      const igraciRequests = odbrambeniIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const odbrambeni = igraci.filter(igrac => igrac.pozicija === 'odbrana');\n        return TimActions.loadOdbrambeniSuccess({\n          odbrambeni\n        });\n      }), catchError(error => of({\n        type: 'load error'\n      })));\n    })))));\n    this.loadVeznjaci$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadVeznjaci), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const veznjaciIds = tim.igraciTeren;\n      const igraciRequests = veznjaciIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const veznjaci = igraci.filter(igrac => igrac.pozicija === 'sredina');\n        return TimActions.loadVeznjaciSuccess({\n          veznjaci\n        });\n      }), catchError(error => of({\n        type: 'load error'\n      })));\n    })))));\n    this.loadNapadaci$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadNapadaci), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const napadaciIds = tim.igraciTeren;\n      const igraciRequests = napadaciIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const napadaci = igraci.filter(igrac => igrac.pozicija === 'napad');\n        return TimActions.loadNapadaciSuccess({\n          napadaci\n        });\n      }), catchError(error => of({\n        type: 'load error'\n      })));\n    })))));\n  }\n}\n_class2 = IgracEffects;\n_class2.ɵfac = function IgracEffects_Factory(t) {\n  return new (t || _class2)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.FudbalskitimService), i0.ɵɵinject(i4.KorisnikService), i0.ɵɵinject(i5.AuthService), i0.ɵɵinject(i6.JwtService));\n};\n_class2.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class2,\n  factory: _class2.ɵfac\n});","map":{"version":3,"names":["createEffect","ofType","forkJoin","of","catchError","map","mergeMap","switchMap","withLatestFrom","TimActions","IgracActions","fromApp","select","selectIgraciTransferLista","selectTrenutniKorisnik","TimEffects","constructor","actions$","fudbalskiTimService","store","korisnikService","addIgracToZamene$","pipe","addIgracToZamene","action","dodajIgracaZamenama","igracId","timId","addIgracToZameneSuccess","addIgracToZameneFailed","addKupljeniIgracURoster$","addKupljeniIgracURoster","dodajIgracaUListuIgraca","kupljeniIgrac","ciljaniTimId","addKupljeniIgracSuccess","azuriraniIdTima","addKupljeniIgracFailed","buyIgrac$","buyIgrac","trenutniKorisnik","buyIgracFailed","igrac","novaCena","virtuelniNovac","cena","ime","id","noviTrenutniKorisnik","updateVirtuelniNovac","buyIgracSuccess","updateTrenutniKorisnik","korisnik","removeIgracFromTransferLista$","removeIgracIzTransferLista","ukloniIgracaSaTransferListe","obrisiIgracIzTransferListaSuccess","obrisiIgracIzTransferListaFailed","updateIgraciTransferLista$","igraciTransferLista","igracIdZaBrisanje","filter","igraci","updateIgraciTransferLista","swapPlayers$","swapPlayers","selectTimState","timState","timID","igracIzlaziId","igracUlaziId","igraciTeren","igraciZamena","trenutniTimID","igracIzlazi","find","swapPlayersFailed","error","getIgracById","igracUlazi","updatedIgraciTeren","ocena","updatedIgraciZamena","getTimById","timToUpdate","updateTimIgraci","swapPlayersSuccess","loadTimovi$","loadTimovi","getSviTimovi","timovi","loadTimoviSuccess","type","updateTim$","updateTim","tim","updateTimSuccess","getTimById$","loadTimById","loadTimByIdSuccess","i0","ɵɵinject","i1","Actions","i2","FudbalskitimService","i3","Store","i4","KorisnikService","factory","ɵfac","IgracEffects","authService","jwtService","loadTrenutniKorisnik$","loadTrenutniKorisnik","isLoggedIn","token","getToken","decodedToken","atob","split","parsedToken","JSON","parse","userId","getKorisnikById","loadTrenutniKorisnikSuccess","updateVirtuelniNovac$","loadIgraci$","loadIgraci","getSviIgraci","loadIgraciSuccess","getIgracById$","loadIgracById","igracID","loadIgracByIdSuccess","getIgraciByPozicija$","loadIgraciByPozicija","getIgraciByPozicija","pozicija","loadIgraciByPozicijaSuccess","getIgraciZamena$","loadIgraciZamena","igraciZamenaIds","getIgraciByIds","loadIgraciZamenaSuccess","getIgraciTeren$","loadIgraciTeren","igraciTerenIds","loadIgraciTerenSuccess","loadGolmani$","loadGolmani","golmaniIds","igraciRequests","golmani","loadGolmaniSuccess","loadOdbrambeni$","loadOdbrambeni","odbrambeniIds","odbrambeni","loadOdbrambeniSuccess","loadVeznjaci$","loadVeznjaci","veznjaciIds","veznjaci","loadVeznjaciSuccess","loadNapadaci$","loadNapadaci","napadaciIds","napadaci","loadNapadaciSuccess","i5","AuthService","i6","JwtService"],"sources":["D:\\OneDrive\\OneDrive - Faculty of Electronic Engineering\\Radna površina\\RWA - Drugi i treci projekat\\AngularProjekat\\src\\app\\store\\igrac.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Observable, forkJoin, of } from 'rxjs';\r\nimport { catchError, map, mergeMap, switchMap, withLatestFrom } from 'rxjs/operators';\r\nimport { FudbalskitimService } from '../services/fudbalskitim.service';\r\nimport * as TimActions from 'src/app/store/igrac.action';\r\nimport * as IgracActions from 'src/app/store/igrac.action';\r\nimport { Igrac } from '../models/igrac';\r\nimport * as fromApp from './igrac.selector';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { selectIgraciTeren, selectIgraciTransferLista, selectIgraciZamena, selectSveState, selectTimState, selectTrenutniKorisnik } from './igrac.selector';\r\nimport { AppState } from '../app.state';\r\nimport { KorisnikService } from '../services/korisnik.service';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { JwtService } from '../services/jwt.service';\r\n\r\n@Injectable()\r\nexport class TimEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private fudbalskiTimService: FudbalskitimService,\r\n    private store: Store<AppState>,\r\n    private korisnikService: KorisnikService,\r\n  ) { }\r\n\r\n  addIgracToZamene$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(IgracActions.addIgracToZamene),\r\n      mergeMap((action) =>\r\n        this.fudbalskiTimService.dodajIgracaZamenama( action.igracId, action.timId).pipe(\r\n          map(() => IgracActions.addIgracToZameneSuccess({  igracId: action.igracId, timId: action.timId})),\r\n          catchError(() => of(IgracActions.addIgracToZameneFailed()))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  addKupljeniIgracURoster$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(TimActions.addKupljeniIgracURoster),\r\n    switchMap((action) =>\r\n      this.fudbalskiTimService.dodajIgracaUListuIgraca(action.kupljeniIgrac, action.ciljaniTimId).pipe(\r\n        map(() => IgracActions.addKupljeniIgracSuccess({\r\n          kupljeniIgrac: { ...action.kupljeniIgrac, timId: action.ciljaniTimId },\r\n          azuriraniIdTima: action.ciljaniTimId\r\n        })),\r\n        catchError(() => of(IgracActions.addKupljeniIgracFailed()))\r\n      )\r\n    )\r\n  )\r\n);\r\n\r\n\r\n  buyIgrac$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(TimActions.buyIgrac),\r\n    withLatestFrom(\r\n      this.store.select(selectTrenutniKorisnik),\r\n      this.store.select(selectIgraciTransferLista)\r\n    ),\r\n    mergeMap(([action, trenutniKorisnik]) => {\r\n      if (!trenutniKorisnik) {\r\n        return of(IgracActions.buyIgracFailed());\r\n      }\r\n\r\n      const igrac = action.igrac;\r\n      const novaCena = trenutniKorisnik.virtuelniNovac - igrac.cena;\r\n      const ime = trenutniKorisnik.ime;\r\n      const id = trenutniKorisnik.id;\r\n\r\n      if (novaCena < 0) {\r\n        return of(IgracActions.buyIgracFailed());\r\n      }\r\n\r\n      const noviTrenutniKorisnik = {\r\n        ...trenutniKorisnik,\r\n        ime: ime,\r\n        id: id,\r\n        virtuelniNovac: novaCena,\r\n      };\r\n\r\n      return this.korisnikService\r\n        .updateVirtuelniNovac(noviTrenutniKorisnik.id, noviTrenutniKorisnik.ime, noviTrenutniKorisnik.virtuelniNovac, noviTrenutniKorisnik.timId)\r\n        .pipe(\r\n          switchMap(() => [\r\n            IgracActions.buyIgracSuccess({ igrac }),\r\n            IgracActions.updateTrenutniKorisnik({ korisnik: noviTrenutniKorisnik }),\r\n          ])\r\n        );\r\n    })\r\n  )\r\n);\r\n\r\nremoveIgracFromTransferLista$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(IgracActions.removeIgracIzTransferLista),\r\n    mergeMap((action) =>\r\n      this.fudbalskiTimService.ukloniIgracaSaTransferListe(action.igracId).pipe(\r\n        map(() => IgracActions.obrisiIgracIzTransferListaSuccess({ igracId: action.igracId })),\r\n        catchError(() => of(IgracActions.obrisiIgracIzTransferListaFailed()))\r\n      )\r\n    )\r\n  )\r\n);\r\n\r\nupdateIgraciTransferLista$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(IgracActions.obrisiIgracIzTransferListaSuccess),\r\n    withLatestFrom(this.store.select(selectIgraciTransferLista)),\r\n    map(([action, igraciTransferLista]) => {\r\n      const igracIdZaBrisanje = action.igracId;\r\n      return igraciTransferLista.filter(igrac => igrac.id !== igracIdZaBrisanje);\r\n    }),\r\n    map(igraci => IgracActions.updateIgraciTransferLista({ igraci }))\r\n  )\r\n);\r\n\r\n\r\nswapPlayers$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(TimActions.swapPlayers),\r\n    withLatestFrom(this.store.pipe(select(fromApp.selectTimState))),\r\n    switchMap(([action, timState]) => {\r\n      const { timID, igracIzlaziId, igracUlaziId } = action;\r\n      const { igraciTeren, igraciZamena, trenutniTimID } = timState;\r\n\r\n      if (igracIzlaziId !== null && igracUlaziId !== null) {\r\n\r\n        const igracIzlazi = igraciTeren.find(igrac => igrac.id === igracIzlaziId);\r\n\r\n        if (!igracIzlazi) {\r\n          return of(TimActions.swapPlayersFailed({ error: 'Igrac za izlaz nije pronadjen' }));\r\n        }\r\n\r\n        return this.fudbalskiTimService.getIgracById(igracUlaziId).pipe(\r\n          switchMap(igracUlazi => {\r\n\r\n            const updatedIgraciTeren = igraciTeren.map(igrac => {\r\n              if (igrac.id === igracIzlaziId) {\r\n                return { ...igrac, id: igracUlaziId, ime: igracUlazi.ime, ocena: igracUlazi.ocena };\r\n              }\r\n              return igrac;\r\n            });\r\n\r\n            const updatedIgraciZamena = igraciZamena.map(igrac => {\r\n              if (igrac.id === igracUlaziId) {\r\n                return { ...igrac, id: igracIzlaziId, ime: igracIzlazi.ime, ocena: igracIzlazi.ocena };\r\n              }\r\n              return igrac;\r\n            });\r\n\r\n            return this.fudbalskiTimService.getTimById(timID).pipe(\r\n              switchMap(timToUpdate => {\r\n                if (!timToUpdate) {\r\n                  return of(TimActions.swapPlayersFailed({ error: 'Tim not found' }));\r\n                }\r\n\r\n                return this.fudbalskiTimService.updateTimIgraci(\r\n                  timID,\r\n                  updatedIgraciTeren.map(igrac => igrac.id),\r\n                  updatedIgraciZamena.map(igrac => igrac.id),\r\n                  timToUpdate\r\n                ).pipe(\r\n                  map(() => TimActions.swapPlayersSuccess({ igraciTeren: updatedIgraciTeren, igraciZamena: updatedIgraciZamena })),\r\n                  catchError(error => of(TimActions.swapPlayersFailed({ error: 'Prvi Error u return' })))\r\n                );\r\n              }),\r\n            );\r\n          })\r\n        );\r\n      } else {\r\n        return of(TimActions.swapPlayersFailed({ error: 'Drugi error' }))\r\n      }\r\n    })\r\n  )\r\n);\r\n\r\n\r\n\r\n\r\n  loadTimovi$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadTimovi),\r\n      mergeMap(() =>\r\n        this.fudbalskiTimService.getSviTimovi()\r\n          .pipe(\r\n            map(timovi => TimActions.loadTimoviSuccess({ timovi })),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  updateTim$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.updateTim),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.updateTimIgraci(\r\n          action.timId, action.igraciTeren, action.igraciZamena, action.tim\r\n        )\r\n          .pipe(\r\n            map(() => TimActions.updateTimSuccess()),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  getTimById$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadTimById),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          map(tim => {\r\n            const igraciTeren = tim.igraciTeren;\r\n            const igraciZamena = tim.igraciZamena;\r\n            return TimActions.loadTimByIdSuccess({\r\n              tim,\r\n              igraciTeren, igraciZamena\r\n            });\r\n          }),\r\n          catchError(() => of({ type: 'load error' }))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n\r\n}\r\n\r\n@Injectable()\r\nexport class IgracEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private fudbalskiTimService: FudbalskitimService,\r\n    private korisnikService: KorisnikService,\r\n    private authService:AuthService,\r\n    private jwtService:JwtService\r\n  ) { }\r\n\r\n\r\n  loadTrenutniKorisnik$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(IgracActions.loadTrenutniKorisnik),\r\n    mergeMap(() => {\r\n      if (this.authService.isLoggedIn()) {\r\n        const token = this.jwtService.getToken();\r\n        if (token) {\r\n          const decodedToken = atob(token.split('.')[1]);\r\n          const parsedToken = JSON.parse(decodedToken);\r\n          const userId = parsedToken.id;\r\n\r\n          return this.korisnikService.getKorisnikById(userId).pipe(\r\n            map(korisnik => IgracActions.loadTrenutniKorisnikSuccess({ korisnik })),\r\n            catchError(() => of({ type: 'Load Korisnik Failed' }))\r\n          );\r\n        }\r\n      }\r\n      return of({ type: 'Load Korisnik Failed' });\r\n    })\r\n  )\r\n);\r\n\r\nupdateVirtuelniNovac$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(IgracActions.buyIgrac), // Prilagodite akciju na svoju akciju za kupovinu igrača\r\n      mergeMap(({ igrac }) =>\r\n        this.korisnikService.updateVirtuelniNovac(igrac.cena).pipe( // Prilagodite putanju prema vašem servisu za ažuriranje virtuelnog novca\r\n          map((virtuelniNovac) =>\r\n            IgracActions.updateVirtuelniNovac({ virtuelniNovac })\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n\r\n  loadIgraci$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(IgracActions.loadIgraci),\r\n      mergeMap(() =>\r\n        this.fudbalskiTimService.getSviIgraci()\r\n          .pipe(\r\n            map(igraci => IgracActions.loadIgraciSuccess({ igraci })),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgracById$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(IgracActions.loadIgracById),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getIgracById(action.igracID).pipe(\r\n          map(igrac => IgracActions.loadIgracByIdSuccess({ igrac })),\r\n          catchError(() => of({ type: 'load error' }))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgraciByPozicija$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadIgraciByPozicija),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getIgraciByPozicija(action.pozicija, action.timID).pipe(\r\n          map(igraci => IgracActions.loadIgraciByPozicijaSuccess({ igraci })),\r\n          catchError(() => of({ type: 'load error' }))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgraciZamena$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadIgraciZamena),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          map(tim => tim.igraciZamena),\r\n          switchMap(igraciZamenaIds =>\r\n            this.fudbalskiTimService.getIgraciByIds(igraciZamenaIds).pipe(\r\n              map(igraciZamena => TimActions.loadIgraciZamenaSuccess({ igraciZamena })),\r\n              catchError(() => of({ type: 'load error' }))\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgraciTeren$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadIgraciTeren),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          map(tim => tim.igraciTeren),\r\n          switchMap(igraciTerenIds =>\r\n            this.fudbalskiTimService.getIgraciByIds(igraciTerenIds).pipe(\r\n              map(igraciTeren => TimActions.loadIgraciTerenSuccess({ igraciTeren })),\r\n              catchError(() => of({ type: 'load error' }))\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadGolmani$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadGolmani),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          switchMap((tim: any) => {\r\n            const golmaniIds: number[] = tim.igraciTeren;\r\n            const igraciRequests: Observable<Igrac>[] = golmaniIds.map((id: number) =>\r\n              this.fudbalskiTimService.getIgracById(id)\r\n            );\r\n\r\n            return forkJoin(igraciRequests).pipe(\r\n              map((igraci: Igrac[]) => {\r\n                const golmani: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'golman');\r\n                return TimActions.loadGolmaniSuccess({ golmani });\r\n              }),\r\n              catchError(error => of({ type: 'load error' }))\r\n            );\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadOdbrambeni$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadOdbrambeni),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          switchMap((tim: any) => {\r\n            const odbrambeniIds: number[] = tim.igraciTeren;\r\n            const igraciRequests: Observable<Igrac>[] = odbrambeniIds.map((id: number) =>\r\n              this.fudbalskiTimService.getIgracById(id)\r\n            );\r\n\r\n            return forkJoin(igraciRequests).pipe(\r\n              map((igraci: Igrac[]) => {\r\n                const odbrambeni: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'odbrana');\r\n                return TimActions.loadOdbrambeniSuccess({ odbrambeni });\r\n              }),\r\n              catchError(error => of({ type: 'load error' }))\r\n            );\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadVeznjaci$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadVeznjaci),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          switchMap((tim: any) => {\r\n            const veznjaciIds: number[] = tim.igraciTeren;\r\n            const igraciRequests: Observable<Igrac>[] = veznjaciIds.map((id: number) =>\r\n              this.fudbalskiTimService.getIgracById(id)\r\n            );\r\n\r\n            return forkJoin(igraciRequests).pipe(\r\n              map((igraci: Igrac[]) => {\r\n                const veznjaci: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'sredina');\r\n                return TimActions.loadVeznjaciSuccess({ veznjaci });\r\n              }),\r\n              catchError(error => of({ type: 'load error' }))\r\n            );\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadNapadaci$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadNapadaci),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          switchMap((tim: any) => {\r\n            const napadaciIds: number[] = tim.igraciTeren;\r\n            const igraciRequests: Observable<Igrac>[] = napadaciIds.map((id: number) =>\r\n              this.fudbalskiTimService.getIgracById(id)\r\n            );\r\n\r\n            return forkJoin(igraciRequests).pipe(\r\n              map((igraci: Igrac[]) => {\r\n                const napadaci: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'napad');\r\n                return TimActions.loadNapadaciSuccess({ napadaci });\r\n              }),\r\n              catchError(error => of({ type: 'load error' }))\r\n            );\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n}\r\n"],"mappings":";AACA,SAAkBA,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAAqBC,QAAQ,EAAEC,EAAE,QAAQ,MAAM;AAC/C,SAASC,UAAU,EAAEC,GAAG,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,cAAc,QAAQ,gBAAgB;AAErF,OAAO,KAAKC,UAAU,MAAM,4BAA4B;AACxD,OAAO,KAAKC,YAAY,MAAM,4BAA4B;AAE1D,OAAO,KAAKC,OAAO,MAAM,kBAAkB;AAC3C,SAAgBC,MAAM,QAAQ,aAAa;AAC3C,SAA4BC,yBAAyB,EAAsDC,sBAAsB,QAAQ,kBAAkB;;;;;;;;AAO3J,OAAM,MAAOC,UAAU;EACrBC,YACUC,QAAiB,EACjBC,mBAAwC,EACxCC,KAAsB,EACtBC,eAAgC;IAHhC,KAAAH,QAAQ,GAARA,QAAQ;IACR,KAAAC,mBAAmB,GAAnBA,mBAAmB;IACnB,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAC,eAAe,GAAfA,eAAe;IAGzB,KAAAC,iBAAiB,GAAGrB,YAAY,CAAC,MAC/B,IAAI,CAACiB,QAAQ,CAACK,IAAI,CAChBrB,MAAM,CAACS,YAAY,CAACa,gBAAgB,CAAC,EACrCjB,QAAQ,CAAEkB,MAAM,IACd,IAAI,CAACN,mBAAmB,CAACO,mBAAmB,CAAED,MAAM,CAACE,OAAO,EAAEF,MAAM,CAACG,KAAK,CAAC,CAACL,IAAI,CAC9EjB,GAAG,CAAC,MAAMK,YAAY,CAACkB,uBAAuB,CAAC;MAAGF,OAAO,EAAEF,MAAM,CAACE,OAAO;MAAEC,KAAK,EAAEH,MAAM,CAACG;IAAK,CAAC,CAAC,CAAC,EACjGvB,UAAU,CAAC,MAAMD,EAAE,CAACO,YAAY,CAACmB,sBAAsB,EAAE,CAAC,CAAC,CAC5D,CACF,CACF,CACF;IAED,KAAAC,wBAAwB,GAAG9B,YAAY,CAAC,MACxC,IAAI,CAACiB,QAAQ,CAACK,IAAI,CAChBrB,MAAM,CAACQ,UAAU,CAACsB,uBAAuB,CAAC,EAC1CxB,SAAS,CAAEiB,MAAM,IACf,IAAI,CAACN,mBAAmB,CAACc,uBAAuB,CAACR,MAAM,CAACS,aAAa,EAAET,MAAM,CAACU,YAAY,CAAC,CAACZ,IAAI,CAC9FjB,GAAG,CAAC,MAAMK,YAAY,CAACyB,uBAAuB,CAAC;MAC7CF,aAAa,EAAE;QAAE,GAAGT,MAAM,CAACS,aAAa;QAAEN,KAAK,EAAEH,MAAM,CAACU;MAAY,CAAE;MACtEE,eAAe,EAAEZ,MAAM,CAACU;KACzB,CAAC,CAAC,EACH9B,UAAU,CAAC,MAAMD,EAAE,CAACO,YAAY,CAAC2B,sBAAsB,EAAE,CAAC,CAAC,CAC5D,CACF,CACF,CACF;IAGC,KAAAC,SAAS,GAAGtC,YAAY,CAAC,MACzB,IAAI,CAACiB,QAAQ,CAACK,IAAI,CAChBrB,MAAM,CAACQ,UAAU,CAAC8B,QAAQ,CAAC,EAC3B/B,cAAc,CACZ,IAAI,CAACW,KAAK,CAACP,MAAM,CAACE,sBAAsB,CAAC,EACzC,IAAI,CAACK,KAAK,CAACP,MAAM,CAACC,yBAAyB,CAAC,CAC7C,EACDP,QAAQ,CAAC,CAAC,CAACkB,MAAM,EAAEgB,gBAAgB,CAAC,KAAI;MACtC,IAAI,CAACA,gBAAgB,EAAE;QACrB,OAAOrC,EAAE,CAACO,YAAY,CAAC+B,cAAc,EAAE,CAAC;;MAG1C,MAAMC,KAAK,GAAGlB,MAAM,CAACkB,KAAK;MAC1B,MAAMC,QAAQ,GAAGH,gBAAgB,CAACI,cAAc,GAAGF,KAAK,CAACG,IAAI;MAC7D,MAAMC,GAAG,GAAGN,gBAAgB,CAACM,GAAG;MAChC,MAAMC,EAAE,GAAGP,gBAAgB,CAACO,EAAE;MAE9B,IAAIJ,QAAQ,GAAG,CAAC,EAAE;QAChB,OAAOxC,EAAE,CAACO,YAAY,CAAC+B,cAAc,EAAE,CAAC;;MAG1C,MAAMO,oBAAoB,GAAG;QAC3B,GAAGR,gBAAgB;QACnBM,GAAG,EAAEA,GAAG;QACRC,EAAE,EAAEA,EAAE;QACNH,cAAc,EAAED;OACjB;MAED,OAAO,IAAI,CAACvB,eAAe,CACxB6B,oBAAoB,CAACD,oBAAoB,CAACD,EAAE,EAAEC,oBAAoB,CAACF,GAAG,EAAEE,oBAAoB,CAACJ,cAAc,EAAEI,oBAAoB,CAACrB,KAAK,CAAC,CACxIL,IAAI,CACHf,SAAS,CAAC,MAAM,CACdG,YAAY,CAACwC,eAAe,CAAC;QAAER;MAAK,CAAE,CAAC,EACvChC,YAAY,CAACyC,sBAAsB,CAAC;QAAEC,QAAQ,EAAEJ;MAAoB,CAAE,CAAC,CACxE,CAAC,CACH;IACL,CAAC,CAAC,CACH,CACF;IAED,KAAAK,6BAA6B,GAAGrD,YAAY,CAAC,MAC3C,IAAI,CAACiB,QAAQ,CAACK,IAAI,CAChBrB,MAAM,CAACS,YAAY,CAAC4C,0BAA0B,CAAC,EAC/ChD,QAAQ,CAAEkB,MAAM,IACd,IAAI,CAACN,mBAAmB,CAACqC,2BAA2B,CAAC/B,MAAM,CAACE,OAAO,CAAC,CAACJ,IAAI,CACvEjB,GAAG,CAAC,MAAMK,YAAY,CAAC8C,iCAAiC,CAAC;MAAE9B,OAAO,EAAEF,MAAM,CAACE;IAAO,CAAE,CAAC,CAAC,EACtFtB,UAAU,CAAC,MAAMD,EAAE,CAACO,YAAY,CAAC+C,gCAAgC,EAAE,CAAC,CAAC,CACtE,CACF,CACF,CACF;IAED,KAAAC,0BAA0B,GAAG1D,YAAY,CAAC,MACxC,IAAI,CAACiB,QAAQ,CAACK,IAAI,CAChBrB,MAAM,CAACS,YAAY,CAAC8C,iCAAiC,CAAC,EACtDhD,cAAc,CAAC,IAAI,CAACW,KAAK,CAACP,MAAM,CAACC,yBAAyB,CAAC,CAAC,EAC5DR,GAAG,CAAC,CAAC,CAACmB,MAAM,EAAEmC,mBAAmB,CAAC,KAAI;MACpC,MAAMC,iBAAiB,GAAGpC,MAAM,CAACE,OAAO;MACxC,OAAOiC,mBAAmB,CAACE,MAAM,CAACnB,KAAK,IAAIA,KAAK,CAACK,EAAE,KAAKa,iBAAiB,CAAC;IAC5E,CAAC,CAAC,EACFvD,GAAG,CAACyD,MAAM,IAAIpD,YAAY,CAACqD,yBAAyB,CAAC;MAAED;IAAM,CAAE,CAAC,CAAC,CAClE,CACF;IAGD,KAAAE,YAAY,GAAGhE,YAAY,CAAC,MAC1B,IAAI,CAACiB,QAAQ,CAACK,IAAI,CAChBrB,MAAM,CAACQ,UAAU,CAACwD,WAAW,CAAC,EAC9BzD,cAAc,CAAC,IAAI,CAACW,KAAK,CAACG,IAAI,CAACV,MAAM,CAACD,OAAO,CAACuD,cAAc,CAAC,CAAC,CAAC,EAC/D3D,SAAS,CAAC,CAAC,CAACiB,MAAM,EAAE2C,QAAQ,CAAC,KAAI;MAC/B,MAAM;QAAEC,KAAK;QAAEC,aAAa;QAAEC;MAAY,CAAE,GAAG9C,MAAM;MACrD,MAAM;QAAE+C,WAAW;QAAEC,YAAY;QAAEC;MAAa,CAAE,GAAGN,QAAQ;MAE7D,IAAIE,aAAa,KAAK,IAAI,IAAIC,YAAY,KAAK,IAAI,EAAE;QAEnD,MAAMI,WAAW,GAAGH,WAAW,CAACI,IAAI,CAACjC,KAAK,IAAIA,KAAK,CAACK,EAAE,KAAKsB,aAAa,CAAC;QAEzE,IAAI,CAACK,WAAW,EAAE;UAChB,OAAOvE,EAAE,CAACM,UAAU,CAACmE,iBAAiB,CAAC;YAAEC,KAAK,EAAE;UAA+B,CAAE,CAAC,CAAC;;QAGrF,OAAO,IAAI,CAAC3D,mBAAmB,CAAC4D,YAAY,CAACR,YAAY,CAAC,CAAChD,IAAI,CAC7Df,SAAS,CAACwE,UAAU,IAAG;UAErB,MAAMC,kBAAkB,GAAGT,WAAW,CAAClE,GAAG,CAACqC,KAAK,IAAG;YACjD,IAAIA,KAAK,CAACK,EAAE,KAAKsB,aAAa,EAAE;cAC9B,OAAO;gBAAE,GAAG3B,KAAK;gBAAEK,EAAE,EAAEuB,YAAY;gBAAExB,GAAG,EAAEiC,UAAU,CAACjC,GAAG;gBAAEmC,KAAK,EAAEF,UAAU,CAACE;cAAK,CAAE;;YAErF,OAAOvC,KAAK;UACd,CAAC,CAAC;UAEF,MAAMwC,mBAAmB,GAAGV,YAAY,CAACnE,GAAG,CAACqC,KAAK,IAAG;YACnD,IAAIA,KAAK,CAACK,EAAE,KAAKuB,YAAY,EAAE;cAC7B,OAAO;gBAAE,GAAG5B,KAAK;gBAAEK,EAAE,EAAEsB,aAAa;gBAAEvB,GAAG,EAAE4B,WAAW,CAAC5B,GAAG;gBAAEmC,KAAK,EAAEP,WAAW,CAACO;cAAK,CAAE;;YAExF,OAAOvC,KAAK;UACd,CAAC,CAAC;UAEF,OAAO,IAAI,CAACxB,mBAAmB,CAACiE,UAAU,CAACf,KAAK,CAAC,CAAC9C,IAAI,CACpDf,SAAS,CAAC6E,WAAW,IAAG;YACtB,IAAI,CAACA,WAAW,EAAE;cAChB,OAAOjF,EAAE,CAACM,UAAU,CAACmE,iBAAiB,CAAC;gBAAEC,KAAK,EAAE;cAAe,CAAE,CAAC,CAAC;;YAGrE,OAAO,IAAI,CAAC3D,mBAAmB,CAACmE,eAAe,CAC7CjB,KAAK,EACLY,kBAAkB,CAAC3E,GAAG,CAACqC,KAAK,IAAIA,KAAK,CAACK,EAAE,CAAC,EACzCmC,mBAAmB,CAAC7E,GAAG,CAACqC,KAAK,IAAIA,KAAK,CAACK,EAAE,CAAC,EAC1CqC,WAAW,CACZ,CAAC9D,IAAI,CACJjB,GAAG,CAAC,MAAMI,UAAU,CAAC6E,kBAAkB,CAAC;cAAEf,WAAW,EAAES,kBAAkB;cAAER,YAAY,EAAEU;YAAmB,CAAE,CAAC,CAAC,EAChH9E,UAAU,CAACyE,KAAK,IAAI1E,EAAE,CAACM,UAAU,CAACmE,iBAAiB,CAAC;cAAEC,KAAK,EAAE;YAAqB,CAAE,CAAC,CAAC,CAAC,CACxF;UACH,CAAC,CAAC,CACH;QACH,CAAC,CAAC,CACH;OACF,MAAM;QACL,OAAO1E,EAAE,CAACM,UAAU,CAACmE,iBAAiB,CAAC;UAAEC,KAAK,EAAE;QAAa,CAAE,CAAC,CAAC;;IAErE,CAAC,CAAC,CACH,CACF;IAKC,KAAAU,WAAW,GAAGvF,YAAY,CAAC,MACzB,IAAI,CAACiB,QAAQ,CAACK,IAAI,CAChBrB,MAAM,CAACQ,UAAU,CAAC+E,UAAU,CAAC,EAC7BlF,QAAQ,CAAC,MACP,IAAI,CAACY,mBAAmB,CAACuE,YAAY,EAAE,CACpCnE,IAAI,CACHjB,GAAG,CAACqF,MAAM,IAAIjF,UAAU,CAACkF,iBAAiB,CAAC;MAAED;IAAM,CAAE,CAAC,CAAC,EACvDtF,UAAU,CAAC,MAAMD,EAAE,CAAC;MAAEyF,IAAI,EAAE;IAAY,CAAE,CAAC,CAAC,CAC7C,CACJ,CACF,CACF;IAED,KAAAC,UAAU,GAAG7F,YAAY,CAAC,MACxB,IAAI,CAACiB,QAAQ,CAACK,IAAI,CAChBrB,MAAM,CAACQ,UAAU,CAACqF,SAAS,CAAC,EAC5BxF,QAAQ,CAACkB,MAAM,IACb,IAAI,CAACN,mBAAmB,CAACmE,eAAe,CACtC7D,MAAM,CAACG,KAAK,EAAEH,MAAM,CAAC+C,WAAW,EAAE/C,MAAM,CAACgD,YAAY,EAAEhD,MAAM,CAACuE,GAAG,CAClE,CACEzE,IAAI,CACHjB,GAAG,CAAC,MAAMI,UAAU,CAACuF,gBAAgB,EAAE,CAAC,EACxC5F,UAAU,CAAC,MAAMD,EAAE,CAAC;MAAEyF,IAAI,EAAE;IAAY,CAAE,CAAC,CAAC,CAC7C,CACJ,CACF,CACF;IAED,KAAAK,WAAW,GAAGjG,YAAY,CAAC,MACzB,IAAI,CAACiB,QAAQ,CAACK,IAAI,CAChBrB,MAAM,CAACQ,UAAU,CAACyF,WAAW,CAAC,EAC9B5F,QAAQ,CAACkB,MAAM,IACb,IAAI,CAACN,mBAAmB,CAACiE,UAAU,CAAC3D,MAAM,CAAC4C,KAAK,CAAC,CAAC9C,IAAI,CACpDjB,GAAG,CAAC0F,GAAG,IAAG;MACR,MAAMxB,WAAW,GAAGwB,GAAG,CAACxB,WAAW;MACnC,MAAMC,YAAY,GAAGuB,GAAG,CAACvB,YAAY;MACrC,OAAO/D,UAAU,CAAC0F,kBAAkB,CAAC;QACnCJ,GAAG;QACHxB,WAAW;QAAEC;OACd,CAAC;IACJ,CAAC,CAAC,EACFpE,UAAU,CAAC,MAAMD,EAAE,CAAC;MAAEyF,IAAI,EAAE;IAAY,CAAE,CAAC,CAAC,CAC7C,CACF,CACF,CACF;EA1MG;;SANO7E,UAAU;;mBAAVA,MAAU,EAAAqF,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,OAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,mBAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,KAAA,GAAAP,EAAA,CAAAC,QAAA,CAAAO,EAAA,CAAAC,eAAA;AAAA;;SAAV9F,MAAU;EAAA+F,OAAA,EAAV/F,MAAU,CAAAgG;AAAA;AAsNvB,OAAM,MAAOC,YAAY;EACvBhG,YACUC,QAAiB,EACjBC,mBAAwC,EACxCE,eAAgC,EAChC6F,WAAuB,EACvBC,UAAqB;IAJrB,KAAAjG,QAAQ,GAARA,QAAQ;IACR,KAAAC,mBAAmB,GAAnBA,mBAAmB;IACnB,KAAAE,eAAe,GAAfA,eAAe;IACf,KAAA6F,WAAW,GAAXA,WAAW;IACX,KAAAC,UAAU,GAAVA,UAAU;IAIpB,KAAAC,qBAAqB,GAAGnH,YAAY,CAAC,MACrC,IAAI,CAACiB,QAAQ,CAACK,IAAI,CAChBrB,MAAM,CAACS,YAAY,CAAC0G,oBAAoB,CAAC,EACzC9G,QAAQ,CAAC,MAAK;MACZ,IAAI,IAAI,CAAC2G,WAAW,CAACI,UAAU,EAAE,EAAE;QACjC,MAAMC,KAAK,GAAG,IAAI,CAACJ,UAAU,CAACK,QAAQ,EAAE;QACxC,IAAID,KAAK,EAAE;UACT,MAAME,YAAY,GAAGC,IAAI,CAACH,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;UAC9C,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACL,YAAY,CAAC;UAC5C,MAAMM,MAAM,GAAGH,WAAW,CAAC5E,EAAE;UAE7B,OAAO,IAAI,CAAC3B,eAAe,CAAC2G,eAAe,CAACD,MAAM,CAAC,CAACxG,IAAI,CACtDjB,GAAG,CAAC+C,QAAQ,IAAI1C,YAAY,CAACsH,2BAA2B,CAAC;YAAE5E;UAAQ,CAAE,CAAC,CAAC,EACvEhD,UAAU,CAAC,MAAMD,EAAE,CAAC;YAAEyF,IAAI,EAAE;UAAsB,CAAE,CAAC,CAAC,CACvD;;;MAGL,OAAOzF,EAAE,CAAC;QAAEyF,IAAI,EAAE;MAAsB,CAAE,CAAC;IAC7C,CAAC,CAAC,CACH,CACF;IAED,KAAAqC,qBAAqB,GAAGjI,YAAY,CAAC,MACjC,IAAI,CAACiB,QAAQ,CAACK,IAAI,CAChBrB,MAAM,CAACS,YAAY,CAAC6B,QAAQ,CAAC;IAAE;IAC/BjC,QAAQ,CAAC,CAAC;MAAEoC;IAAK,CAAE,KACjB,IAAI,CAACtB,eAAe,CAAC6B,oBAAoB,CAACP,KAAK,CAACG,IAAI,CAAC,CAACvB,IAAI;IAAE;IAC1DjB,GAAG,CAAEuC,cAAc,IACjBlC,YAAY,CAACuC,oBAAoB,CAAC;MAAEL;IAAc,CAAE,CAAC,CACtD,CACF,CACF,CACF,CACF;IAGD,KAAAsF,WAAW,GAAGlI,YAAY,CAAC,MACzB,IAAI,CAACiB,QAAQ,CAACK,IAAI,CAChBrB,MAAM,CAACS,YAAY,CAACyH,UAAU,CAAC,EAC/B7H,QAAQ,CAAC,MACP,IAAI,CAACY,mBAAmB,CAACkH,YAAY,EAAE,CACpC9G,IAAI,CACHjB,GAAG,CAACyD,MAAM,IAAIpD,YAAY,CAAC2H,iBAAiB,CAAC;MAAEvE;IAAM,CAAE,CAAC,CAAC,EACzD1D,UAAU,CAAC,MAAMD,EAAE,CAAC;MAAEyF,IAAI,EAAE;IAAY,CAAE,CAAC,CAAC,CAC7C,CACJ,CACF,CACF;IAED,KAAA0C,aAAa,GAAGtI,YAAY,CAAC,MAC3B,IAAI,CAACiB,QAAQ,CAACK,IAAI,CAChBrB,MAAM,CAACS,YAAY,CAAC6H,aAAa,CAAC,EAClCjI,QAAQ,CAACkB,MAAM,IACb,IAAI,CAACN,mBAAmB,CAAC4D,YAAY,CAACtD,MAAM,CAACgH,OAAO,CAAC,CAAClH,IAAI,CACxDjB,GAAG,CAACqC,KAAK,IAAIhC,YAAY,CAAC+H,oBAAoB,CAAC;MAAE/F;IAAK,CAAE,CAAC,CAAC,EAC1DtC,UAAU,CAAC,MAAMD,EAAE,CAAC;MAAEyF,IAAI,EAAE;IAAY,CAAE,CAAC,CAAC,CAC7C,CACF,CACF,CACF;IAED,KAAA8C,oBAAoB,GAAG1I,YAAY,CAAC,MAClC,IAAI,CAACiB,QAAQ,CAACK,IAAI,CAChBrB,MAAM,CAACQ,UAAU,CAACkI,oBAAoB,CAAC,EACvCrI,QAAQ,CAACkB,MAAM,IACb,IAAI,CAACN,mBAAmB,CAAC0H,mBAAmB,CAACpH,MAAM,CAACqH,QAAQ,EAAErH,MAAM,CAAC4C,KAAK,CAAC,CAAC9C,IAAI,CAC9EjB,GAAG,CAACyD,MAAM,IAAIpD,YAAY,CAACoI,2BAA2B,CAAC;MAAEhF;IAAM,CAAE,CAAC,CAAC,EACnE1D,UAAU,CAAC,MAAMD,EAAE,CAAC;MAAEyF,IAAI,EAAE;IAAY,CAAE,CAAC,CAAC,CAC7C,CACF,CACF,CACF;IAED,KAAAmD,gBAAgB,GAAG/I,YAAY,CAAC,MAC9B,IAAI,CAACiB,QAAQ,CAACK,IAAI,CAChBrB,MAAM,CAACQ,UAAU,CAACuI,gBAAgB,CAAC,EACnC1I,QAAQ,CAACkB,MAAM,IACb,IAAI,CAACN,mBAAmB,CAACiE,UAAU,CAAC3D,MAAM,CAAC4C,KAAK,CAAC,CAAC9C,IAAI,CACpDjB,GAAG,CAAC0F,GAAG,IAAIA,GAAG,CAACvB,YAAY,CAAC,EAC5BjE,SAAS,CAAC0I,eAAe,IACvB,IAAI,CAAC/H,mBAAmB,CAACgI,cAAc,CAACD,eAAe,CAAC,CAAC3H,IAAI,CAC3DjB,GAAG,CAACmE,YAAY,IAAI/D,UAAU,CAAC0I,uBAAuB,CAAC;MAAE3E;IAAY,CAAE,CAAC,CAAC,EACzEpE,UAAU,CAAC,MAAMD,EAAE,CAAC;MAAEyF,IAAI,EAAE;IAAY,CAAE,CAAC,CAAC,CAC7C,CACF,CACF,CACF,CACF,CACF;IAED,KAAAwD,eAAe,GAAGpJ,YAAY,CAAC,MAC7B,IAAI,CAACiB,QAAQ,CAACK,IAAI,CAChBrB,MAAM,CAACQ,UAAU,CAAC4I,eAAe,CAAC,EAClC/I,QAAQ,CAACkB,MAAM,IACb,IAAI,CAACN,mBAAmB,CAACiE,UAAU,CAAC3D,MAAM,CAAC4C,KAAK,CAAC,CAAC9C,IAAI,CACpDjB,GAAG,CAAC0F,GAAG,IAAIA,GAAG,CAACxB,WAAW,CAAC,EAC3BhE,SAAS,CAAC+I,cAAc,IACtB,IAAI,CAACpI,mBAAmB,CAACgI,cAAc,CAACI,cAAc,CAAC,CAAChI,IAAI,CAC1DjB,GAAG,CAACkE,WAAW,IAAI9D,UAAU,CAAC8I,sBAAsB,CAAC;MAAEhF;IAAW,CAAE,CAAC,CAAC,EACtEnE,UAAU,CAAC,MAAMD,EAAE,CAAC;MAAEyF,IAAI,EAAE;IAAY,CAAE,CAAC,CAAC,CAC7C,CACF,CACF,CACF,CACF,CACF;IAED,KAAA4D,YAAY,GAAGxJ,YAAY,CAAC,MAC1B,IAAI,CAACiB,QAAQ,CAACK,IAAI,CAChBrB,MAAM,CAACQ,UAAU,CAACgJ,WAAW,CAAC,EAC9BnJ,QAAQ,CAACkB,MAAM,IACb,IAAI,CAACN,mBAAmB,CAACiE,UAAU,CAAC3D,MAAM,CAAC4C,KAAK,CAAC,CAAC9C,IAAI,CACpDf,SAAS,CAAEwF,GAAQ,IAAI;MACrB,MAAM2D,UAAU,GAAa3D,GAAG,CAACxB,WAAW;MAC5C,MAAMoF,cAAc,GAAwBD,UAAU,CAACrJ,GAAG,CAAE0C,EAAU,IACpE,IAAI,CAAC7B,mBAAmB,CAAC4D,YAAY,CAAC/B,EAAE,CAAC,CAC1C;MAED,OAAO7C,QAAQ,CAACyJ,cAAc,CAAC,CAACrI,IAAI,CAClCjB,GAAG,CAAEyD,MAAe,IAAI;QACtB,MAAM8F,OAAO,GAAY9F,MAAM,CAACD,MAAM,CAACnB,KAAK,IAAIA,KAAK,CAACmG,QAAQ,KAAK,QAAQ,CAAC;QAC5E,OAAOpI,UAAU,CAACoJ,kBAAkB,CAAC;UAAED;QAAO,CAAE,CAAC;MACnD,CAAC,CAAC,EACFxJ,UAAU,CAACyE,KAAK,IAAI1E,EAAE,CAAC;QAAEyF,IAAI,EAAE;MAAY,CAAE,CAAC,CAAC,CAChD;IACH,CAAC,CAAC,CACH,CACF,CACF,CACF;IAED,KAAAkE,eAAe,GAAG9J,YAAY,CAAC,MAC7B,IAAI,CAACiB,QAAQ,CAACK,IAAI,CAChBrB,MAAM,CAACQ,UAAU,CAACsJ,cAAc,CAAC,EACjCzJ,QAAQ,CAACkB,MAAM,IACb,IAAI,CAACN,mBAAmB,CAACiE,UAAU,CAAC3D,MAAM,CAAC4C,KAAK,CAAC,CAAC9C,IAAI,CACpDf,SAAS,CAAEwF,GAAQ,IAAI;MACrB,MAAMiE,aAAa,GAAajE,GAAG,CAACxB,WAAW;MAC/C,MAAMoF,cAAc,GAAwBK,aAAa,CAAC3J,GAAG,CAAE0C,EAAU,IACvE,IAAI,CAAC7B,mBAAmB,CAAC4D,YAAY,CAAC/B,EAAE,CAAC,CAC1C;MAED,OAAO7C,QAAQ,CAACyJ,cAAc,CAAC,CAACrI,IAAI,CAClCjB,GAAG,CAAEyD,MAAe,IAAI;QACtB,MAAMmG,UAAU,GAAYnG,MAAM,CAACD,MAAM,CAACnB,KAAK,IAAIA,KAAK,CAACmG,QAAQ,KAAK,SAAS,CAAC;QAChF,OAAOpI,UAAU,CAACyJ,qBAAqB,CAAC;UAAED;QAAU,CAAE,CAAC;MACzD,CAAC,CAAC,EACF7J,UAAU,CAACyE,KAAK,IAAI1E,EAAE,CAAC;QAAEyF,IAAI,EAAE;MAAY,CAAE,CAAC,CAAC,CAChD;IACH,CAAC,CAAC,CACH,CACF,CACF,CACF;IAED,KAAAuE,aAAa,GAAGnK,YAAY,CAAC,MAC3B,IAAI,CAACiB,QAAQ,CAACK,IAAI,CAChBrB,MAAM,CAACQ,UAAU,CAAC2J,YAAY,CAAC,EAC/B9J,QAAQ,CAACkB,MAAM,IACb,IAAI,CAACN,mBAAmB,CAACiE,UAAU,CAAC3D,MAAM,CAAC4C,KAAK,CAAC,CAAC9C,IAAI,CACpDf,SAAS,CAAEwF,GAAQ,IAAI;MACrB,MAAMsE,WAAW,GAAatE,GAAG,CAACxB,WAAW;MAC7C,MAAMoF,cAAc,GAAwBU,WAAW,CAAChK,GAAG,CAAE0C,EAAU,IACrE,IAAI,CAAC7B,mBAAmB,CAAC4D,YAAY,CAAC/B,EAAE,CAAC,CAC1C;MAED,OAAO7C,QAAQ,CAACyJ,cAAc,CAAC,CAACrI,IAAI,CAClCjB,GAAG,CAAEyD,MAAe,IAAI;QACtB,MAAMwG,QAAQ,GAAYxG,MAAM,CAACD,MAAM,CAACnB,KAAK,IAAIA,KAAK,CAACmG,QAAQ,KAAK,SAAS,CAAC;QAC9E,OAAOpI,UAAU,CAAC8J,mBAAmB,CAAC;UAAED;QAAQ,CAAE,CAAC;MACrD,CAAC,CAAC,EACFlK,UAAU,CAACyE,KAAK,IAAI1E,EAAE,CAAC;QAAEyF,IAAI,EAAE;MAAY,CAAE,CAAC,CAAC,CAChD;IACH,CAAC,CAAC,CACH,CACF,CACF,CACF;IAED,KAAA4E,aAAa,GAAGxK,YAAY,CAAC,MAC3B,IAAI,CAACiB,QAAQ,CAACK,IAAI,CAChBrB,MAAM,CAACQ,UAAU,CAACgK,YAAY,CAAC,EAC/BnK,QAAQ,CAACkB,MAAM,IACb,IAAI,CAACN,mBAAmB,CAACiE,UAAU,CAAC3D,MAAM,CAAC4C,KAAK,CAAC,CAAC9C,IAAI,CACpDf,SAAS,CAAEwF,GAAQ,IAAI;MACrB,MAAM2E,WAAW,GAAa3E,GAAG,CAACxB,WAAW;MAC7C,MAAMoF,cAAc,GAAwBe,WAAW,CAACrK,GAAG,CAAE0C,EAAU,IACrE,IAAI,CAAC7B,mBAAmB,CAAC4D,YAAY,CAAC/B,EAAE,CAAC,CAC1C;MAED,OAAO7C,QAAQ,CAACyJ,cAAc,CAAC,CAACrI,IAAI,CAClCjB,GAAG,CAAEyD,MAAe,IAAI;QACtB,MAAM6G,QAAQ,GAAY7G,MAAM,CAACD,MAAM,CAACnB,KAAK,IAAIA,KAAK,CAACmG,QAAQ,KAAK,OAAO,CAAC;QAC5E,OAAOpI,UAAU,CAACmK,mBAAmB,CAAC;UAAED;QAAQ,CAAE,CAAC;MACrD,CAAC,CAAC,EACFvK,UAAU,CAACyE,KAAK,IAAI1E,EAAE,CAAC;QAAEyF,IAAI,EAAE;MAAY,CAAE,CAAC,CAAC,CAChD;IACH,CAAC,CAAC,CACH,CACF,CACF,CACF;EA5MG;;UAPOoB,YAAY;;mBAAZA,OAAY,EAAAZ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,OAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,mBAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAO,EAAA,CAAAC,eAAA,GAAAT,EAAA,CAAAC,QAAA,CAAAwE,EAAA,CAAAC,WAAA,GAAA1E,EAAA,CAAAC,QAAA,CAAA0E,EAAA,CAAAC,UAAA;AAAA;;SAAZhE,OAAY;EAAAF,OAAA,EAAZE,OAAY,CAAAD;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}