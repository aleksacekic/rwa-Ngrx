{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nexport let AuthService = class AuthService {\n  constructor(jwtService, cookieService) {\n    this.jwtService = jwtService;\n    this.cookieService = cookieService;\n  }\n  isLoggedIn() {\n    return !!this.jwtService.getToken();\n  }\n  ngOnInit() {\n    const token = this.cookieService.get('jwt');\n    console.log('JWT Token:', token);\n  }\n  getUserId() {\n    // Uzmi ID korisnika iz JWT tokena\n    const token = this.jwtService.getToken();\n    if (!token) {\n      return null;\n    }\n    // Dekodiraj JWT da bi dobili podatke o korisniku\n    const decodedToken = atob(token.split('.')[1]); // Dekodiran drugi deo JWT\n    const parsedToken = JSON.parse(decodedToken);\n    return parsedToken.id; // Promeni \"userId\" u \"id\" ako je to pravo ime polja u JWT tokenima\n  }\n};\n\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);","map":{"version":3,"names":["Injectable","AuthService","constructor","jwtService","cookieService","isLoggedIn","getToken","ngOnInit","token","get","console","log","getUserId","decodedToken","atob","split","parsedToken","JSON","parse","id","__decorate","providedIn"],"sources":["D:\\OneDrive\\OneDrive - Faculty of Electronic Engineering\\Radna povr≈°ina\\RWA - Drugi i treci projekat\\AngularProjekat\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { JwtService } from './jwt.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(private jwtService: JwtService, private cookieService:CookieService) {}\n\n  isLoggedIn(): boolean {\n    return !!this.jwtService.getToken();\n  }\n\n  ngOnInit() {\n    const token = this.cookieService.get('jwt');\n    console.log('JWT Token:', token);\n  }\n\n  getUserId(): number | null {\n    // Uzmi ID korisnika iz JWT tokena\n    const token = this.jwtService.getToken();\n    if (!token) {\n      return null;\n    }\n\n    // Dekodiraj JWT da bi dobili podatke o korisniku\n    const decodedToken = atob(token.split('.')[1]); // Dekodiran drugi deo JWT\n    const parsedToken = JSON.parse(decodedToken);\n\n    return parsedToken.id; // Promeni \"userId\" u \"id\" ako je to pravo ime polja u JWT tokenima\n  }\n}\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAMnC,WAAMC,WAAW,GAAjB,MAAMA,WAAW;EACtBC,YAAoBC,UAAsB,EAAUC,aAA2B;IAA3D,KAAAD,UAAU,GAAVA,UAAU;IAAsB,KAAAC,aAAa,GAAbA,aAAa;EAAiB;EAElFC,UAAUA,CAAA;IACR,OAAO,CAAC,CAAC,IAAI,CAACF,UAAU,CAACG,QAAQ,EAAE;EACrC;EAEAC,QAAQA,CAAA;IACN,MAAMC,KAAK,GAAG,IAAI,CAACJ,aAAa,CAACK,GAAG,CAAC,KAAK,CAAC;IAC3CC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEH,KAAK,CAAC;EAClC;EAEAI,SAASA,CAAA;IACP;IACA,MAAMJ,KAAK,GAAG,IAAI,CAACL,UAAU,CAACG,QAAQ,EAAE;IACxC,IAAI,CAACE,KAAK,EAAE;MACV,OAAO,IAAI;;IAGb;IACA,MAAMK,YAAY,GAAGC,IAAI,CAACN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChD,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACL,YAAY,CAAC;IAE5C,OAAOG,WAAW,CAACG,EAAE,CAAC,CAAC;EACzB;CACD;;AAzBYlB,WAAW,GAAAmB,UAAA,EAHvBpB,UAAU,CAAC;EACVqB,UAAU,EAAE;CACb,CAAC,C,EACWpB,WAAW,CAyBvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}