{"ast":null,"code":"var _class;\nimport { environment } from 'src/environments/environment';\nimport { forkJoin, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FudbalskitimService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  dodajIgracaUListuIgraca(igrac, ciljaniTimId) {\n    const updatedIgrac = {\n      ...igrac,\n      timId: ciljaniTimId\n    };\n    return this.httpClient.post(`${environment.api}/igraci`, updatedIgrac);\n  }\n  dodajIgraca(igrac) {\n    return this.httpClient.post(`${environment.api}/igraci/`, igrac);\n  }\n  ukloniIgracaSaTransferListe(igracId) {\n    return this.httpClient.delete(`${environment.api}/igraciTransferLista/${igracId}`);\n  }\n  dodajIgracaZamenama(igracZamenaID, timId) {\n    return this.httpClient.get(environment.api + `/timovi/${timId}`).pipe(switchMap(tim => {\n      tim.igraciZamena.push(igracZamenaID);\n      return this.httpClient.put(environment.api + `/timovi/${timId}`, tim);\n    }));\n  }\n  updateIgraciTransferLista(igraci) {\n    return this.httpClient.put(`${environment.api}/igracitransferlista`, igraci);\n  }\n  getSviIgraci() {\n    return this.httpClient.get(environment.api + \"/igraci\");\n  }\n  getTimById(timId) {\n    return this.httpClient.get(environment.api + `/timovi/${timId}`);\n  }\n  getSviTimovi() {\n    return this.httpClient.get(environment.api + \"/timovi\");\n  }\n  getIgracById(igracId) {\n    return this.httpClient.get(environment.api + `/igraci/${igracId}`);\n  }\n  getIgraciByIds(igraciIds) {\n    const requests = igraciIds.map(id => this.getIgracById(id));\n    return forkJoin(requests);\n  }\n  getIgraciByPozicija(pozicija, timId) {\n    return this.httpClient.get(environment.api + `/igraci?pozicija=${pozicija}&timId=${timId}`);\n  }\n  updateTimIgraci(timId, igraciTerenIds, igraciZamenaIds, tim) {\n    const url = `${environment.api}/timovi/${timId}/updateigraci`;\n    const updatedData = {\n      ...tim,\n      teren: igraciTerenIds,\n      zamena: igraciZamenaIds\n    };\n    return this.httpClient.put(url, updatedData);\n  }\n}\n_class = FudbalskitimService;\n_class.ɵfac = function FudbalskitimService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["environment","forkJoin","switchMap","FudbalskitimService","constructor","httpClient","dodajIgracaUListuIgraca","igrac","ciljaniTimId","updatedIgrac","timId","post","api","dodajIgraca","ukloniIgracaSaTransferListe","igracId","delete","dodajIgracaZamenama","igracZamenaID","get","pipe","tim","igraciZamena","push","put","updateIgraciTransferLista","igraci","getSviIgraci","getTimById","getSviTimovi","getIgracById","getIgraciByIds","igraciIds","requests","map","id","getIgraciByPozicija","pozicija","updateTimIgraci","igraciTerenIds","igraciZamenaIds","url","updatedData","teren","zamena","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\OneDrive\\OneDrive - Faculty of Electronic Engineering\\Radna površina\\RWA - Drugi i treci projekat\\AngularProjekat\\src\\app\\services\\fudbalskitim.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Igrac } from '../models/igrac';\nimport { Tim } from '../models/tim';\nimport { environment } from 'src/environments/environment';\nimport { Observable, forkJoin, switchMap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FudbalskitimService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  \n\n  dodajIgracaUListuIgraca(igrac: Igrac, ciljaniTimId: number) {\n    const updatedIgrac = { ...igrac, timId: ciljaniTimId };\n    return this.httpClient.post(`${environment.api}/igraci`, updatedIgrac);\n  }\n\n  dodajIgraca(igrac: Igrac) {\n    return this.httpClient.post<Igrac>(`${environment.api}/igraci/`, igrac);\n  }\n\n  ukloniIgracaSaTransferListe(igracId: number) {\n    return this.httpClient.delete<void>(`${environment.api}/igraciTransferLista/${igracId}`);\n  }\n\n  dodajIgracaZamenama(igracZamenaID: number, timId: number) {\n    return this.httpClient.get<Tim>(environment.api + `/timovi/${timId}`).pipe(\n      switchMap((tim: Tim) => {\n        tim.igraciZamena.push(igracZamenaID);\n\n        return this.httpClient.put<Tim>(environment.api + `/timovi/${timId}`, tim);\n      })\n    );\n  }\n\n  updateIgraciTransferLista(igraci: Igrac[]): Observable<void> {\n    return this.httpClient.put<void>(`${environment.api}/igracitransferlista`, igraci);\n  }\n\n  getSviIgraci(){\n    return this.httpClient.get<Igrac[]>(environment.api + \"/igraci\");\n  }\n\n  getTimById(timId: number) {\n    return this.httpClient.get<any>(environment.api + `/timovi/${timId}`);\n  }\n\n  getSviTimovi(){\n    return this.httpClient.get<Tim[]>(environment.api + \"/timovi\");\n  }\n\n  getIgracById(igracId: number) {\n    return this.httpClient.get<Igrac>(environment.api + `/igraci/${igracId}`);\n  }\n\n  getIgraciByIds(igraciIds: number[]): Observable<Igrac[]> {\n    const requests: Observable<Igrac>[] = igraciIds.map(id => this.getIgracById(id));\n    return forkJoin(requests);\n  }\n\n  getIgraciByPozicija(pozicija: string, timId: number) {\n    return this.httpClient.get<Igrac[]>(environment.api + `/igraci?pozicija=${pozicija}&timId=${timId}`);\n  }\n\n  updateTimIgraci(timId: number, igraciTerenIds: number[], igraciZamenaIds: number[], tim:Tim): Observable<any> {\n    const url = `${environment.api}/timovi/${timId}/updateigraci`;\n    const updatedData = {\n      ...tim,\n      teren: igraciTerenIds,\n      zamena: igraciZamenaIds\n    };\n  \n    return this.httpClient.put(url, updatedData);\n  }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}