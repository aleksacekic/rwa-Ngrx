{"ast":null,"code":"var _class, _class2, _class3;\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { forkJoin, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap, withLatestFrom } from 'rxjs/operators';\nimport * as TimActions from 'src/app/store/igrac.action';\nimport * as IgracActions from 'src/app/store/igrac.action';\nimport * as fromApp from './igrac.selector';\nimport { select } from '@ngrx/store';\nimport { selectIgraciTransferLista, selectTrenutniKorisnik } from './igrac.selector';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/fudbalskitim.service\";\nimport * as i3 from \"@ngrx/store\";\nimport * as i4 from \"../services/korisnik.service\";\nexport class MatchEffects {\n  constructor(actions$, fudbalskitimService) {\n    this.actions$ = actions$;\n    this.fudbalskitimService = fudbalskitimService;\n    this.startMatchSimulation$ = createEffect(() => this.actions$.pipe(ofType(startMatchSimulation), switchMap(action => this.fudbalskitimService.simulateMatch(action.protivnikId).pipe(map(pobednik => MatchActions.startMatchSimulationSuccess({\n      pobednik\n    })), catchError(() => of(MatchActions.startMatchSimulationFailure()))))));\n  }\n}\n_class = MatchEffects;\n_class.ɵfac = function MatchEffects_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.FudbalskitimService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});\nexport class TimEffects {\n  constructor(actions$, fudbalskiTimService, store, korisnikService) {\n    this.actions$ = actions$;\n    this.fudbalskiTimService = fudbalskiTimService;\n    this.store = store;\n    this.korisnikService = korisnikService;\n    this.addIgracToZamene$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.addIgracToZamene), mergeMap(action => this.fudbalskiTimService.dodajIgracaZamenama(action.igracId, action.timId).pipe(map(() => IgracActions.addIgracToZameneSuccess({\n      igracId: action.igracId,\n      timId: action.timId\n    })), catchError(() => of(IgracActions.addIgracToZameneFailed()))))));\n    this.addKupljeniIgracURoster$ = createEffect(() => this.actions$.pipe(ofType(TimActions.addKupljeniIgracURoster), switchMap(action => this.fudbalskiTimService.dodajIgracaUListuIgraca(action.kupljeniIgrac, action.ciljaniTimId).pipe(map(() => IgracActions.addKupljeniIgracSuccess({\n      kupljeniIgrac: {\n        ...action.kupljeniIgrac,\n        timId: action.ciljaniTimId\n      },\n      azuriraniIdTima: action.ciljaniTimId\n    })), catchError(() => of(IgracActions.addKupljeniIgracFailed()))))));\n    // addKupljeniIgracURoster$ = createEffect(() =>\n    //   this.actions$.pipe(\n    //     ofType(TimActions.addKupljeniIgracURoster),\n    //     mergeMap((action) =>\n    //       this.fudbalskiTimService.dodajIgracaZamenama(action.kupljeniIgrac.id, action.ciljaniTimId).pipe(\n    //         map(() => IgracActions.addKupljeniIgracSuccess({\n    //           kupljeniIgrac: { ...action.kupljeniIgrac, timId: action.ciljaniTimId },\n    //           azuriraniIdTima: action.ciljaniTimId\n    //         })),\n    //         catchError(() => of(IgracActions.addKupljeniIgracFailed()))\n    //       )\n    //     )\n    //   )\n    // );\n    this.buyIgrac$ = createEffect(() => this.actions$.pipe(ofType(TimActions.buyIgrac), withLatestFrom(this.store.select(selectTrenutniKorisnik), this.store.select(selectIgraciTransferLista)), mergeMap(([action, trenutniKorisnik, igraciTransferLista]) => {\n      if (!trenutniKorisnik) {\n        return of(IgracActions.buyIgracFailed()); // Ako trenutniKorisnik nije definisan\n      }\n\n      const igrac = action.igrac;\n      const novaCena = trenutniKorisnik.virtuelniNovac - igrac.cena;\n      const ime = trenutniKorisnik.ime;\n      const id = trenutniKorisnik.id;\n      if (novaCena < 0) {\n        return of(IgracActions.buyIgracFailed());\n      }\n      const noviTrenutniKorisnik = {\n        ...trenutniKorisnik,\n        ime: ime,\n        id: id,\n        virtuelniNovac: novaCena\n      };\n      return this.korisnikService.updateVirtuelniNovac(noviTrenutniKorisnik.id, noviTrenutniKorisnik.ime, noviTrenutniKorisnik.virtuelniNovac, noviTrenutniKorisnik.timId).pipe(switchMap(() => [IgracActions.buyIgracSuccess({\n        igrac\n      }), IgracActions.updateTrenutniKorisnik({\n        korisnik: noviTrenutniKorisnik\n      })]));\n    })));\n    this.removeIgracFromTransferLista$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.removeIgracIzTransferLista), mergeMap(action => this.fudbalskiTimService.ukloniIgracaSaTransferListe(action.igracId).pipe(map(() => IgracActions.obrisiIgracIzTransferListaSuccess({\n      igracId: action.igracId\n    })), catchError(() => of(IgracActions.obrisiIgracIzTransferListaFailed()))))));\n    this.updateIgraciTransferLista$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.obrisiIgracIzTransferListaSuccess), withLatestFrom(this.store.select(selectIgraciTransferLista)), map(([action, igraciTransferLista]) => {\n      const igracIdZaBrisanje = action.igracId;\n      return igraciTransferLista.filter(igrac => igrac.id !== igracIdZaBrisanje);\n    }), map(igraci => IgracActions.updateIgraciTransferLista({\n      igraci\n    }))));\n    this.swapPlayers$ = createEffect(() => this.actions$.pipe(ofType(TimActions.swapPlayers), withLatestFrom(this.store.pipe(select(fromApp.selectTimState))), switchMap(([action, timState]) => {\n      const {\n        timID,\n        igracIzlaziId,\n        igracUlaziId\n      } = action;\n      const {\n        igraciTeren,\n        igraciZamena,\n        trenutniTimID\n      } = timState;\n      if (igracIzlaziId !== null && igracUlaziId !== null) {\n        // Preuzmite informacije o igraču koji izlazi iz igraciTeren\n        const igracIzlazi = igraciTeren.find(igrac => igrac.id === igracIzlaziId);\n        if (!igracIzlazi) {\n          return of(TimActions.swapPlayersFailed({\n            error: 'Igrač za zamenu nije pronađen'\n          }));\n        }\n        // Preuzmite informacije o igraču koji ulazi iz servisa\n        return this.fudbalskiTimService.getIgracById(igracUlaziId).pipe(switchMap(igracUlazi => {\n          // Kreiraj ažuriranu listu igracaTeren i igracaZamena na osnovu zamene\n          const updatedIgraciTeren = igraciTeren.map(igrac => {\n            if (igrac.id === igracIzlaziId) {\n              return {\n                ...igrac,\n                id: igracUlaziId,\n                ime: igracUlazi.ime,\n                ocena: igracUlazi.ocena\n              };\n            }\n            return igrac;\n          });\n          const updatedIgraciZamena = igraciZamena.map(igrac => {\n            if (igrac.id === igracUlaziId) {\n              return {\n                ...igrac,\n                id: igracIzlaziId,\n                ime: igracIzlazi.ime,\n                ocena: igracIzlazi.ocena\n              };\n            }\n            return igrac;\n          });\n          return this.fudbalskiTimService.getTimById(timID).pipe(switchMap(timToUpdate => {\n            if (!timToUpdate) {\n              return of(TimActions.swapPlayersFailed({\n                error: 'Tim not found'\n              }));\n            }\n            // Logika za zamenu igrača\n            return this.fudbalskiTimService.updateTimIgraci(timID, updatedIgraciTeren.map(igrac => igrac.id), updatedIgraciZamena.map(igrac => igrac.id), timToUpdate).pipe(map(() => TimActions.swapPlayersSuccess({\n              igraciTeren: updatedIgraciTeren,\n              igraciZamena: updatedIgraciZamena\n            })), catchError(error => of(TimActions.swapPlayersFailed({\n              error: 'Error updating igrači'\n            }))));\n          }));\n        }));\n      } else {\n        return of(TimActions.swapPlayersFailed({\n          error: 'Error updating igrači'\n        }));\n      }\n    })));\n    this.loadTimovi$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadTimovi), mergeMap(() => this.fudbalskiTimService.getSviTimovi().pipe(map(timovi => TimActions.loadTimoviSuccess({\n      timovi\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.updateTim$ = createEffect(() => this.actions$.pipe(ofType(TimActions.updateTim), mergeMap(action => this.fudbalskiTimService.updateTimIgraci(action.timId, action.igraciTeren, action.igraciZamena, action.tim).pipe(map(() => TimActions.updateTimSuccess()), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getTimById$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadTimById), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(map(tim => {\n      const igraciTeren = tim.igraciTeren;\n      const igraciZamena = tim.igraciZamena;\n      return TimActions.loadTimByIdSuccess({\n        tim,\n        igraciTeren,\n        igraciZamena\n      });\n    }), catchError(() => of({\n      type: 'load error'\n    }))))));\n  }\n}\n_class2 = TimEffects;\n_class2.ɵfac = function TimEffects_Factory(t) {\n  return new (t || _class2)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.FudbalskitimService), i0.ɵɵinject(i3.Store), i0.ɵɵinject(i4.KorisnikService));\n};\n_class2.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class2,\n  factory: _class2.ɵfac\n});\nexport class IgracEffects {\n  constructor(actions$, fudbalskiTimService, korisnikService) {\n    this.actions$ = actions$;\n    this.fudbalskiTimService = fudbalskiTimService;\n    this.korisnikService = korisnikService;\n    this.loadTrenutniKorisnik$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.loadTrenutniKorisnik),\n    // Pretpostavljeno ime akcije\n    mergeMap(() => this.korisnikService.getKorisnikById(1).pipe(\n    // Pretpostavljeno korisnikId\n    map(korisnik => IgracActions.loadTrenutniKorisnikSuccess({\n      korisnik\n    })), catchError(() => of({\n      type: 'Load Korisnik Failed'\n    }))))));\n    this.loadIgraci$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.loadIgraci), mergeMap(() => this.fudbalskiTimService.getSviIgraci().pipe(map(igraci => IgracActions.loadIgraciSuccess({\n      igraci\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getIgracById$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.loadIgracById), mergeMap(action => this.fudbalskiTimService.getIgracById(action.igracID).pipe(map(igrac => IgracActions.loadIgracByIdSuccess({\n      igrac\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getIgraciByPozicija$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadIgraciByPozicija), mergeMap(action => this.fudbalskiTimService.getIgraciByPozicija(action.pozicija, action.timID).pipe(map(igraci => IgracActions.loadIgraciByPozicijaSuccess({\n      igraci\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getIgraciZamena$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadIgraciZamena), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(map(tim => tim.igraciZamena), switchMap(igraciZamenaIds => this.fudbalskiTimService.getIgraciByIds(igraciZamenaIds).pipe(map(igraciZamena => TimActions.loadIgraciZamenaSuccess({\n      igraciZamena\n    })), catchError(() => of({\n      type: 'load error'\n    }))))))));\n    this.getIgraciTeren$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadIgraciTeren), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(map(tim => tim.igraciTeren), switchMap(igraciTerenIds => this.fudbalskiTimService.getIgraciByIds(igraciTerenIds).pipe(map(igraciTeren => TimActions.loadIgraciTerenSuccess({\n      igraciTeren\n    })), catchError(() => of({\n      type: 'load error'\n    }))))))));\n    this.loadGolmani$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadGolmani), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const golmaniIds = tim.igraciTeren;\n      const igraciRequests = golmaniIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const golmani = igraci.filter(igrac => igrac.pozicija === 'golman');\n        return TimActions.loadGolmaniSuccess({\n          golmani\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n    this.loadOdbrambeni$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadOdbrambeni), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const odbrambeniIds = tim.igraciTeren;\n      const igraciRequests = odbrambeniIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const odbrambeni = igraci.filter(igrac => igrac.pozicija === 'odbrana');\n        return TimActions.loadOdbrambeniSuccess({\n          odbrambeni\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n    this.loadVeznjaci$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadVeznjaci), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const veznjaciIds = tim.igraciTeren;\n      const igraciRequests = veznjaciIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const veznjaci = igraci.filter(igrac => igrac.pozicija === 'sredina');\n        return TimActions.loadVeznjaciSuccess({\n          veznjaci\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n    this.loadNapadaci$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadNapadaci), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const napadaciIds = tim.igraciTeren;\n      const igraciRequests = napadaciIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const napadaci = igraci.filter(igrac => igrac.pozicija === 'napad');\n        return TimActions.loadNapadaciSuccess({\n          napadaci\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n  }\n}\n_class3 = IgracEffects;\n_class3.ɵfac = function IgracEffects_Factory(t) {\n  return new (t || _class3)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.FudbalskitimService), i0.ɵɵinject(i4.KorisnikService));\n};\n_class3.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class3,\n  factory: _class3.ɵfac\n});","map":{"version":3,"names":["createEffect","ofType","forkJoin","of","catchError","map","mergeMap","switchMap","withLatestFrom","TimActions","IgracActions","fromApp","select","selectIgraciTransferLista","selectTrenutniKorisnik","MatchEffects","constructor","actions$","fudbalskitimService","startMatchSimulation$","pipe","startMatchSimulation","action","simulateMatch","protivnikId","pobednik","MatchActions","startMatchSimulationSuccess","startMatchSimulationFailure","i0","ɵɵinject","i1","Actions","i2","FudbalskitimService","factory","ɵfac","TimEffects","fudbalskiTimService","store","korisnikService","addIgracToZamene$","addIgracToZamene","dodajIgracaZamenama","igracId","timId","addIgracToZameneSuccess","addIgracToZameneFailed","addKupljeniIgracURoster$","addKupljeniIgracURoster","dodajIgracaUListuIgraca","kupljeniIgrac","ciljaniTimId","addKupljeniIgracSuccess","azuriraniIdTima","addKupljeniIgracFailed","buyIgrac$","buyIgrac","trenutniKorisnik","igraciTransferLista","buyIgracFailed","igrac","novaCena","virtuelniNovac","cena","ime","id","noviTrenutniKorisnik","updateVirtuelniNovac","buyIgracSuccess","updateTrenutniKorisnik","korisnik","removeIgracFromTransferLista$","removeIgracIzTransferLista","ukloniIgracaSaTransferListe","obrisiIgracIzTransferListaSuccess","obrisiIgracIzTransferListaFailed","updateIgraciTransferLista$","igracIdZaBrisanje","filter","igraci","updateIgraciTransferLista","swapPlayers$","swapPlayers","selectTimState","timState","timID","igracIzlaziId","igracUlaziId","igraciTeren","igraciZamena","trenutniTimID","igracIzlazi","find","swapPlayersFailed","error","getIgracById","igracUlazi","updatedIgraciTeren","ocena","updatedIgraciZamena","getTimById","timToUpdate","updateTimIgraci","swapPlayersSuccess","loadTimovi$","loadTimovi","getSviTimovi","timovi","loadTimoviSuccess","type","updateTim$","updateTim","tim","updateTimSuccess","getTimById$","loadTimById","loadTimByIdSuccess","i3","Store","i4","KorisnikService","IgracEffects","loadTrenutniKorisnik$","loadTrenutniKorisnik","getKorisnikById","loadTrenutniKorisnikSuccess","loadIgraci$","loadIgraci","getSviIgraci","loadIgraciSuccess","getIgracById$","loadIgracById","igracID","loadIgracByIdSuccess","getIgraciByPozicija$","loadIgraciByPozicija","getIgraciByPozicija","pozicija","loadIgraciByPozicijaSuccess","getIgraciZamena$","loadIgraciZamena","igraciZamenaIds","getIgraciByIds","loadIgraciZamenaSuccess","getIgraciTeren$","loadIgraciTeren","igraciTerenIds","loadIgraciTerenSuccess","loadGolmani$","loadGolmani","golmaniIds","igraciRequests","golmani","loadGolmaniSuccess","loadOdbrambeni$","loadOdbrambeni","odbrambeniIds","odbrambeni","loadOdbrambeniSuccess","loadVeznjaci$","loadVeznjaci","veznjaciIds","veznjaci","loadVeznjaciSuccess","loadNapadaci$","loadNapadaci","napadaciIds","napadaci","loadNapadaciSuccess"],"sources":["D:\\OneDrive\\OneDrive - Faculty of Electronic Engineering\\Radna površina\\AngularProjekat\\src\\app\\store\\igrac.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Observable, forkJoin, of } from 'rxjs';\r\nimport { catchError, map, mergeMap, switchMap, withLatestFrom } from 'rxjs/operators';\r\nimport { FudbalskitimService } from '../services/fudbalskitim.service';\r\nimport * as TimActions from 'src/app/store/igrac.action';\r\nimport * as IgracActions from 'src/app/store/igrac.action';\r\nimport { Igrac } from '../models/igrac';\r\nimport * as fromApp from './igrac.selector';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { selectIgraciTeren, selectIgraciTransferLista, selectIgraciZamena, selectSveState, selectTimState, selectTrenutniKorisnik } from './igrac.selector';\r\nimport { AppState } from '../app.state';\r\nimport { KorisnikService } from '../services/korisnik.service';\r\n\r\n@Injectable()\r\nexport class MatchEffects {\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private fudbalskitimService: FudbalskitimService\r\n  ) {}\r\n\r\n  startMatchSimulation$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(startMatchSimulation),\r\n    switchMap((action) =>\r\n      this.fudbalskitimService.simulateMatch(action.protivnikId).pipe(\r\n        map((pobednik) => MatchActions.startMatchSimulationSuccess({ pobednik })),\r\n        catchError(() => of(MatchActions.startMatchSimulationFailure()))\r\n      )\r\n    )\r\n  )\r\n);\r\n}\r\n\r\n\r\n@Injectable()\r\nexport class TimEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private fudbalskiTimService: FudbalskitimService,\r\n    private store: Store<AppState>,\r\n    private korisnikService: KorisnikService\r\n  ) { }\r\n\r\n  addIgracToZamene$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(IgracActions.addIgracToZamene),\r\n      mergeMap((action) =>\r\n        this.fudbalskiTimService.dodajIgracaZamenama( action.igracId, action.timId).pipe(\r\n          map(() => IgracActions.addIgracToZameneSuccess({  igracId: action.igracId, timId: action.timId})),\r\n          catchError(() => of(IgracActions.addIgracToZameneFailed()))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  addKupljeniIgracURoster$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(TimActions.addKupljeniIgracURoster),\r\n    switchMap((action) =>\r\n      this.fudbalskiTimService.dodajIgracaUListuIgraca(action.kupljeniIgrac, action.ciljaniTimId).pipe(\r\n        map(() => IgracActions.addKupljeniIgracSuccess({\r\n          kupljeniIgrac: { ...action.kupljeniIgrac, timId: action.ciljaniTimId },\r\n          azuriraniIdTima: action.ciljaniTimId\r\n        })),\r\n        catchError(() => of(IgracActions.addKupljeniIgracFailed()))\r\n      )\r\n    )\r\n  )\r\n);\r\n\r\n  // addKupljeniIgracURoster$ = createEffect(() =>\r\n  //   this.actions$.pipe(\r\n  //     ofType(TimActions.addKupljeniIgracURoster),\r\n  //     mergeMap((action) =>\r\n  //       this.fudbalskiTimService.dodajIgracaZamenama(action.kupljeniIgrac.id, action.ciljaniTimId).pipe(\r\n  //         map(() => IgracActions.addKupljeniIgracSuccess({\r\n  //           kupljeniIgrac: { ...action.kupljeniIgrac, timId: action.ciljaniTimId },\r\n  //           azuriraniIdTima: action.ciljaniTimId\r\n  //         })),\r\n  //         catchError(() => of(IgracActions.addKupljeniIgracFailed()))\r\n  //       )\r\n  //     )\r\n  //   )\r\n  // );\r\n\r\n  buyIgrac$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(TimActions.buyIgrac),\r\n    withLatestFrom(\r\n      this.store.select(selectTrenutniKorisnik),\r\n      this.store.select(selectIgraciTransferLista)\r\n    ),\r\n    mergeMap(([action, trenutniKorisnik, igraciTransferLista]) => {\r\n      if (!trenutniKorisnik) {\r\n        return of(IgracActions.buyIgracFailed()); // Ako trenutniKorisnik nije definisan\r\n      }\r\n\r\n      const igrac = action.igrac;\r\n      const novaCena = trenutniKorisnik.virtuelniNovac - igrac.cena;\r\n      const ime = trenutniKorisnik.ime;\r\n      const id = trenutniKorisnik.id;\r\n\r\n      if (novaCena < 0) {\r\n        return of(IgracActions.buyIgracFailed());\r\n      }\r\n\r\n      const noviTrenutniKorisnik = {\r\n        ...trenutniKorisnik,\r\n        ime:ime,\r\n        id:id,\r\n        virtuelniNovac: novaCena,\r\n      };\r\n\r\n      return this.korisnikService\r\n        .updateVirtuelniNovac(noviTrenutniKorisnik.id, noviTrenutniKorisnik.ime, noviTrenutniKorisnik.virtuelniNovac, noviTrenutniKorisnik.timId)\r\n        .pipe(\r\n          switchMap(() => [\r\n            IgracActions.buyIgracSuccess({ igrac }),\r\n            IgracActions.updateTrenutniKorisnik({ korisnik: noviTrenutniKorisnik }),\r\n          ])\r\n        );\r\n    })\r\n  )\r\n);\r\n\r\nremoveIgracFromTransferLista$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(IgracActions.removeIgracIzTransferLista),\r\n    mergeMap((action) =>\r\n      this.fudbalskiTimService.ukloniIgracaSaTransferListe(action.igracId).pipe(\r\n        map(() => IgracActions.obrisiIgracIzTransferListaSuccess({ igracId: action.igracId })),\r\n        catchError(() => of(IgracActions.obrisiIgracIzTransferListaFailed()))\r\n      )\r\n    )\r\n  )\r\n);\r\n\r\nupdateIgraciTransferLista$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(IgracActions.obrisiIgracIzTransferListaSuccess),\r\n    withLatestFrom(this.store.select(selectIgraciTransferLista)),\r\n    map(([action, igraciTransferLista]) => {\r\n      const igracIdZaBrisanje = action.igracId;\r\n      return igraciTransferLista.filter(igrac => igrac.id !== igracIdZaBrisanje);\r\n    }),\r\n    map(igraci => IgracActions.updateIgraciTransferLista({ igraci }))\r\n  )\r\n);\r\n\r\n\r\nswapPlayers$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(TimActions.swapPlayers),\r\n    withLatestFrom(this.store.pipe(select(fromApp.selectTimState))),\r\n    switchMap(([action, timState]) => {\r\n      const { timID, igracIzlaziId, igracUlaziId } = action;\r\n      const { igraciTeren, igraciZamena, trenutniTimID } = timState;\r\n\r\n      if (igracIzlaziId !== null && igracUlaziId !== null) {\r\n\r\n        // Preuzmite informacije o igraču koji izlazi iz igraciTeren\r\n        const igracIzlazi = igraciTeren.find(igrac => igrac.id === igracIzlaziId);\r\n\r\n        if (!igracIzlazi) {\r\n          return of(TimActions.swapPlayersFailed({ error: 'Igrač za zamenu nije pronađen' }));\r\n        }\r\n\r\n        // Preuzmite informacije o igraču koji ulazi iz servisa\r\n        return this.fudbalskiTimService.getIgracById(igracUlaziId).pipe(\r\n          switchMap(igracUlazi => {\r\n\r\n            // Kreiraj ažuriranu listu igracaTeren i igracaZamena na osnovu zamene\r\n            const updatedIgraciTeren = igraciTeren.map(igrac => {\r\n              if (igrac.id === igracIzlaziId) {\r\n                return { ...igrac, id: igracUlaziId, ime: igracUlazi.ime, ocena: igracUlazi.ocena };\r\n              }\r\n              return igrac;\r\n            });\r\n\r\n            const updatedIgraciZamena = igraciZamena.map(igrac => {\r\n              if (igrac.id === igracUlaziId) {\r\n                return { ...igrac, id: igracIzlaziId, ime: igracIzlazi.ime, ocena: igracIzlazi.ocena };\r\n              }\r\n              return igrac;\r\n            });\r\n\r\n            return this.fudbalskiTimService.getTimById(timID).pipe(\r\n              switchMap(timToUpdate => {\r\n                if (!timToUpdate) {\r\n                  return of(TimActions.swapPlayersFailed({ error: 'Tim not found' }));\r\n                }\r\n\r\n                // Logika za zamenu igrača\r\n\r\n                return this.fudbalskiTimService.updateTimIgraci(\r\n                  timID,\r\n                  updatedIgraciTeren.map(igrac => igrac.id),\r\n                  updatedIgraciZamena.map(igrac => igrac.id),\r\n                  timToUpdate\r\n                ).pipe(\r\n                  map(() => TimActions.swapPlayersSuccess({ igraciTeren: updatedIgraciTeren, igraciZamena: updatedIgraciZamena })),\r\n                  catchError(error => of(TimActions.swapPlayersFailed({ error: 'Error updating igrači' })))\r\n                );\r\n              }),\r\n            );\r\n          })\r\n        );\r\n      } else {\r\n        return of(TimActions.swapPlayersFailed({ error: 'Error updating igrači' }))\r\n      }\r\n    })\r\n  )\r\n);\r\n\r\n\r\n\r\n\r\n  loadTimovi$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadTimovi),\r\n      mergeMap(() =>\r\n        this.fudbalskiTimService.getSviTimovi()\r\n          .pipe(\r\n            map(timovi => TimActions.loadTimoviSuccess({ timovi })),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  updateTim$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.updateTim),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.updateTimIgraci(\r\n          action.timId, action.igraciTeren, action.igraciZamena, action.tim\r\n        )\r\n          .pipe(\r\n            map(() => TimActions.updateTimSuccess()),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  getTimById$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadTimById),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          map(tim => {\r\n            const igraciTeren = tim.igraciTeren;\r\n            const igraciZamena = tim.igraciZamena;\r\n            return TimActions.loadTimByIdSuccess({\r\n              tim,\r\n              igraciTeren, igraciZamena\r\n            });\r\n          }),\r\n          catchError(() => of({ type: 'load error' }))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n\r\n}\r\n\r\n@Injectable()\r\nexport class IgracEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private fudbalskiTimService: FudbalskitimService,\r\n    private korisnikService: KorisnikService\r\n  ) { }\r\n\r\n  loadTrenutniKorisnik$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(IgracActions.loadTrenutniKorisnik), // Pretpostavljeno ime akcije\r\n      mergeMap(() =>\r\n        this.korisnikService.getKorisnikById(1).pipe( // Pretpostavljeno korisnikId\r\n          map(korisnik => IgracActions.loadTrenutniKorisnikSuccess({ korisnik })),\r\n          catchError(() => of({ type: 'Load Korisnik Failed' }))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n\r\n  loadIgraci$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(IgracActions.loadIgraci),\r\n      mergeMap(() =>\r\n        this.fudbalskiTimService.getSviIgraci()\r\n          .pipe(\r\n            map(igraci => IgracActions.loadIgraciSuccess({ igraci })),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgracById$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(IgracActions.loadIgracById),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getIgracById(action.igracID).pipe(\r\n          map(igrac => IgracActions.loadIgracByIdSuccess({ igrac })),\r\n          catchError(() => of({ type: 'load error' }))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgraciByPozicija$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadIgraciByPozicija),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getIgraciByPozicija(action.pozicija, action.timID).pipe(\r\n          map(igraci => IgracActions.loadIgraciByPozicijaSuccess({ igraci })),\r\n          catchError(() => of({ type: 'load error' }))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgraciZamena$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadIgraciZamena),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          map(tim => tim.igraciZamena),\r\n          switchMap(igraciZamenaIds =>\r\n            this.fudbalskiTimService.getIgraciByIds(igraciZamenaIds).pipe(\r\n              map(igraciZamena => TimActions.loadIgraciZamenaSuccess({ igraciZamena })),\r\n              catchError(() => of({ type: 'load error' }))\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgraciTeren$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadIgraciTeren),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          map(tim => tim.igraciTeren),\r\n          switchMap(igraciTerenIds =>\r\n            this.fudbalskiTimService.getIgraciByIds(igraciTerenIds).pipe(\r\n              map(igraciTeren => TimActions.loadIgraciTerenSuccess({ igraciTeren })),\r\n              catchError(() => of({ type: 'load error' }))\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadGolmani$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadGolmani),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          switchMap((tim: any) => {\r\n            const golmaniIds: number[] = tim.igraciTeren;\r\n            const igraciRequests: Observable<Igrac>[] = golmaniIds.map((id: number) =>\r\n              this.fudbalskiTimService.getIgracById(id)\r\n            );\r\n\r\n            return forkJoin(igraciRequests).pipe(\r\n              map((igraci: Igrac[]) => {\r\n                const golmani: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'golman');\r\n                return TimActions.loadGolmaniSuccess({ golmani });\r\n              }),\r\n              catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n            );\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadOdbrambeni$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadOdbrambeni),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          switchMap((tim: any) => {\r\n            const odbrambeniIds: number[] = tim.igraciTeren;\r\n            const igraciRequests: Observable<Igrac>[] = odbrambeniIds.map((id: number) =>\r\n              this.fudbalskiTimService.getIgracById(id)\r\n            );\r\n\r\n            return forkJoin(igraciRequests).pipe(\r\n              map((igraci: Igrac[]) => {\r\n                const odbrambeni: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'odbrana');\r\n                return TimActions.loadOdbrambeniSuccess({ odbrambeni });\r\n              }),\r\n              catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n            );\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadVeznjaci$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadVeznjaci),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          switchMap((tim: any) => {\r\n            const veznjaciIds: number[] = tim.igraciTeren;\r\n            const igraciRequests: Observable<Igrac>[] = veznjaciIds.map((id: number) =>\r\n              this.fudbalskiTimService.getIgracById(id)\r\n            );\r\n\r\n            return forkJoin(igraciRequests).pipe(\r\n              map((igraci: Igrac[]) => {\r\n                const veznjaci: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'sredina');\r\n                return TimActions.loadVeznjaciSuccess({ veznjaci });\r\n              }),\r\n              catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n            );\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadNapadaci$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadNapadaci),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n          switchMap((tim: any) => {\r\n            const napadaciIds: number[] = tim.igraciTeren;\r\n            const igraciRequests: Observable<Igrac>[] = napadaciIds.map((id: number) =>\r\n              this.fudbalskiTimService.getIgracById(id)\r\n            );\r\n\r\n            return forkJoin(igraciRequests).pipe(\r\n              map((igraci: Igrac[]) => {\r\n                const napadaci: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'napad');\r\n                return TimActions.loadNapadaciSuccess({ napadaci });\r\n              }),\r\n              catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n            );\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}