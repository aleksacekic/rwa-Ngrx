{"ast":null,"code":"import { createReducer, on } from \"@ngrx/store\";\nimport { loadGolmaniSuccess, loadIgraciSuccess, loadIgraciTerenSuccess, loadIgraciZamenaSuccess, loadNapadaciSuccess, loadOdbrambeniSuccess, loadTimByIdSuccess, loadTimoviSuccess, loadVeznjaciSuccess, swapPlayersSuccess, updateTimSuccess } from \"./igrac.action\";\nexport const selectTimState = state => state.timovi;\nconst initialStateTim = {\n  timovi: [],\n  trenutniTimID: 0,\n  igraciTeren: [],\n  igraciZamena: [],\n  selectedPlayerIdOut: null,\n  selectedPlayerIdIn: null\n};\nexport const timReducer = createReducer(initialStateTim, on(swapPlayersSuccess, (state, {\n  igraciTeren,\n  igraciZamena\n}) => ({\n  ...state,\n  igraciTeren,\n  igraciZamena\n})), on(loadTimoviSuccess,\n// znaci treba da def kako ce se stanje promeniti posle akcije loadTimoviSucces\n(state, {\n  timovi\n}) => ({\n  ...state,\n  timovi: timovi\n})),\n//moze i samo timovi\non(updateTimSuccess, state => ({\n  ...state\n})),\n// on(swapPlayers, (state, { igracIzlaziId, igracUlaziId }) => {\n//   const updatedTimovi = state.timovi.map(tim => {\n//     const igracIzlaziIndex = tim.igraciTeren.indexOf(igracIzlaziId);\n//     const igracUlaziIndex = tim.igraciZamena.indexOf(igracUlaziId);\n//     // Ako su pronađeni, vršimo zamenu u nizovima\n//     if (igracIzlaziIndex !== -1 && igracUlaziIndex !== -1) {\n//       tim.igraciTeren[igracIzlaziIndex] = igracUlaziId;\n//       tim.igraciZamena[igracUlaziIndex] = igracIzlaziId;\n//     }\n//     return tim;\n//   });\n//   console.log(\"OVO JE IZ TIM REDUCERA\")\n//   console.log(state,updatedTimovi);\n//   return { ...state, timovi: updatedTimovi };\n// }),\non(loadTimByIdSuccess, (state, {\n  tim,\n  igraciTeren,\n  igraciZamena\n}) => {\n  return {\n    ...state,\n    timovi: state.timovi.map(postojeciTim => postojeciTim.id === tim.id ? {\n      ...tim\n    } : postojeciTim),\n    igraciTerenIds: igraciTeren,\n    igraciZamenaIds: igraciZamena\n  };\n}), on(loadIgraciZamenaSuccess, (state, {\n  igraciZamena\n}) => {\n  return {\n    ...state,\n    igraciZamena: igraciZamena // Ažuriramo niz igrača zamena\n  };\n}), on(loadIgraciTerenSuccess, (state, {\n  igraciTeren\n}) => {\n  return {\n    ...state,\n    igraciTeren: igraciTeren // Ažuriramo niz igrača zamena\n  };\n}), on(loadGolmaniSuccess, (state, {\n  golmani\n}) => {\n  return {\n    ...state,\n    golmani: golmani\n  };\n}), on(loadOdbrambeniSuccess, (state, {\n  odbrambeni\n}) => {\n  return {\n    ...state,\n    odbrambeni: odbrambeni\n  };\n}), on(loadVeznjaciSuccess, (state, {\n  veznjaci\n}) => {\n  return {\n    ...state,\n    veznjaci: veznjaci\n  };\n}), on(loadNapadaciSuccess, (state, {\n  napadaci\n}) => {\n  return {\n    ...state,\n    napadaci: napadaci\n  };\n}));\nconst initialStateIgraci = {\n  igraci: [],\n  pozicija: \"\"\n};\nexport const igracReducer = createReducer(initialStateIgraci, on(loadIgraciSuccess, (state, {\n  igraci\n}) => ({\n  ...state,\n  igraci: igraci\n})));","map":{"version":3,"names":["createReducer","on","loadGolmaniSuccess","loadIgraciSuccess","loadIgraciTerenSuccess","loadIgraciZamenaSuccess","loadNapadaciSuccess","loadOdbrambeniSuccess","loadTimByIdSuccess","loadTimoviSuccess","loadVeznjaciSuccess","swapPlayersSuccess","updateTimSuccess","selectTimState","state","timovi","initialStateTim","trenutniTimID","igraciTeren","igraciZamena","selectedPlayerIdOut","selectedPlayerIdIn","timReducer","tim","map","postojeciTim","id","igraciTerenIds","igraciZamenaIds","golmani","odbrambeni","veznjaci","napadaci","initialStateIgraci","igraci","pozicija","igracReducer"],"sources":["D:\\OneDrive\\OneDrive - Faculty of Electronic Engineering\\Radna površina\\AngularProjekat\\src\\app\\store\\igrac.reducer.ts"],"sourcesContent":["import { createReducer, on } from \"@ngrx/store\";\r\nimport { Igrac } from \"../models/igrac\";\r\nimport { Tim } from \"../models/tim\";\r\nimport { loadGolmaniSuccess, loadIgraciSuccess, loadIgraciTerenSuccess, loadIgraciZamenaSuccess, loadNapadaciSuccess, loadOdbrambeniSuccess, loadTimByIdSuccess, loadTimoviSuccess, loadVeznjaciSuccess, swapPlayers, swapPlayersSuccess, updateIgracSuccess, updateTimSuccess } from \"./igrac.action\";\r\n\r\nexport const selectTimState = (state: TimState) => state.timovi;\r\n\r\nexport interface IgracState {\r\n  igraci: Igrac[],\r\n  pozicija:string,\r\n}\r\n\r\nexport interface TimState {\r\n  timovi: Tim[];\r\n  trenutniTimID: number;\r\n  igraciTeren: Igrac[];\r\n  igraciZamena: Igrac[];\r\n  selectedPlayerIdOut: null,\r\n  selectedPlayerIdIn: null\r\n}\r\n\r\ninterface SelektovaniIgraciState {\r\n  igracNaTerenId: number | null;\r\n  igracNaKlupiId: number | null;\r\n}\r\n\r\n\r\nconst initialStateTim: TimState = {\r\n  timovi: [],\r\n  trenutniTimID:0,\r\n  igraciTeren: [],\r\n  igraciZamena:[],\r\n  selectedPlayerIdOut: null,\r\n  selectedPlayerIdIn: null\r\n};\r\n\r\nexport const timReducer = createReducer(\r\n  initialStateTim,\r\n  on(swapPlayersSuccess, (state, { igraciTeren, igraciZamena }) => ({\r\n    ...state,\r\n    igraciTeren,\r\n    igraciZamena,\r\n  })),\r\n\r\n\r\n  \r\n  on(loadTimoviSuccess, // znaci treba da def kako ce se stanje promeniti posle akcije loadTimoviSucces\r\n     (state, { timovi }) =>\r\n      ({ ...state, //destruktuiramo\r\n         timovi: timovi })), //moze i samo timovi\r\n  on(updateTimSuccess, state => ({ ...state })),\r\n  // on(swapPlayers, (state, { igracIzlaziId, igracUlaziId }) => {\r\n  //   const updatedTimovi = state.timovi.map(tim => {\r\n  //     const igracIzlaziIndex = tim.igraciTeren.indexOf(igracIzlaziId);\r\n  //     const igracUlaziIndex = tim.igraciZamena.indexOf(igracUlaziId);\r\n\r\n  //     // Ako su pronađeni, vršimo zamenu u nizovima\r\n  //     if (igracIzlaziIndex !== -1 && igracUlaziIndex !== -1) {\r\n  //       tim.igraciTeren[igracIzlaziIndex] = igracUlaziId;\r\n  //       tim.igraciZamena[igracUlaziIndex] = igracIzlaziId;\r\n  //     }\r\n\r\n  //     return tim;\r\n  //   });\r\n  //   console.log(\"OVO JE IZ TIM REDUCERA\")\r\n  //   console.log(state,updatedTimovi);\r\n  //   return { ...state, timovi: updatedTimovi };\r\n  // }),\r\n  on(loadTimByIdSuccess, (state, { tim,\r\n     igraciTeren, igraciZamena }) => {\r\n    return {\r\n      ...state,\r\n      timovi: state.timovi.map(postojeciTim =>\r\n        postojeciTim.id === tim.id ? { ...tim } : postojeciTim\r\n      ),\r\n      igraciTerenIds: igraciTeren,\r\n      igraciZamenaIds: igraciZamena\r\n    };\r\n  }),\r\n  on(loadIgraciZamenaSuccess, (state, { igraciZamena }) => {\r\n    return {\r\n      ...state,\r\n      igraciZamena: igraciZamena // Ažuriramo niz igrača zamena\r\n    };\r\n  }),\r\n  on(loadIgraciTerenSuccess, (state, { igraciTeren }) => {\r\n    return {\r\n      ...state,\r\n      igraciTeren: igraciTeren // Ažuriramo niz igrača zamena\r\n    };\r\n  }),\r\n  on(loadGolmaniSuccess, (state, { golmani }) => {\r\n    return {\r\n      ...state,\r\n      golmani: golmani\r\n    };\r\n  }),\r\n  on(loadOdbrambeniSuccess, (state, { odbrambeni }) => {\r\n    return {\r\n      ...state,\r\n      odbrambeni: odbrambeni\r\n    };\r\n  }),\r\n  on(loadVeznjaciSuccess, (state, { veznjaci }) => {\r\n    return {\r\n      ...state,\r\n      veznjaci: veznjaci\r\n    };\r\n  }),\r\n  on(loadNapadaciSuccess, (state, { napadaci }) => {\r\n    return {\r\n      ...state,\r\n      napadaci: napadaci\r\n    };\r\n  })\r\n);\r\n\r\nconst initialStateIgraci: IgracState = {\r\n  igraci: [],\r\n  pozicija:\"\"\r\n};\r\n\r\nexport const igracReducer = createReducer(\r\n  initialStateIgraci,\r\n  on(loadIgraciSuccess,\r\n     (state, { igraci }) =>\r\n      ({ ...state,\r\n         igraci: igraci })),\r\n  // on(updateIgracSuccess, state => ({ ...state })),\r\n  \r\n  \r\n);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}