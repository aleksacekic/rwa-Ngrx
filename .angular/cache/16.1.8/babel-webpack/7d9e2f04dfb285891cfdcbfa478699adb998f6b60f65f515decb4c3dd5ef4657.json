{"ast":null,"code":"export {};\n// export class FudbalskitimComponent implements OnInit {\n//   trenutniTimID = 2; //hardcodede\n//   trenutniTim: any;\n//   igraciTerenIds: number[] = [];\n//   igraciZamenaIds: number[] = [];\n//   igraciTeren: any[] = [];\n//   igraciZamena: any[] = [];\n//   golmani: any[] = [];\n//   odbrambeni: any[] = [];\n//   veznjaci: any[] = [];\n//   napadaci: any[] = [];\n//   // igrac$: Observable<Igrac[]> = of([]);\n//   constructor(private fudbalskitimService: FudbalskitimService) { }\n//   ngOnInit(): void {\n//     // this.igrac$ = this.fudbalskitimService.getSviIgraci();\n//     this.fudbalskitimService.getTimById(this.trenutniTimID).subscribe((tim) => {\n//       this.trenutniTim = tim;\n//       this.igraciTerenIds = tim.igraciTeren;\n//       this.igraciZamenaIds = tim.igraciZamena;\n//       const requests = this.igraciZamenaIds.map((igracId: number) =>\n//       this.fudbalskitimService.getIgracById(igracId)\n//     );\n//     forkJoin(requests).subscribe((igraci: Igrac[][]) => {\n//       this.igraciZamena = igraci.flat(); //flat - ovde ce spojimo nizove u jedan niz objekata\n//     });\n//     //koristimo FORKJOIN za istovremeno pozivanje vise zahteva, i ceka se da se svi zahtevi zavrse pre nego sto se obrade rezultati\n//     this.fudbalskitimService.getIgraciByPozicija('golman', this.trenutniTimID).subscribe((igraci: Igrac[]) => {\n//       this.golmani = igraci.filter(igrac => this.igraciTerenIds.includes(igrac.id));\n//     });\n//       this.fudbalskitimService.getIgraciByPozicija('odbrana', this.trenutniTimID).subscribe((igraci: Igrac[]) => {\n//         this.odbrambeni = igraci.filter(igrac => this.igraciTerenIds.includes(igrac.id)); // dodelice se samo oni ciji se id nalazi u igraciTerenIds!\n//       });\n//       this.fudbalskitimService.getIgraciByPozicija('sredina', this.trenutniTimID).subscribe((igraci: Igrac[]) => {\n//         this.veznjaci = igraci.filter(igrac => this.igraciTerenIds.includes(igrac.id));\n//       });\n//       this.fudbalskitimService.getIgraciByPozicija('napad', this.trenutniTimID).subscribe((igraci: Igrac[]) => {\n//         this.napadaci = igraci.filter(igrac => this.igraciTerenIds.includes(igrac.id));\n//       });\n//     })\n//   }\n//   @Output() onClick:EventEmitter<Igrac>=new EventEmitter<Igrac>();\n//   selectedPlayerIdOut: number | null = null;\n//   selectedPlayerIdIn: number | null = null;\n//   clickedUlazi(playerId: number)\n//   {\n//     this.selectedPlayerIdOut = playerId;\n//   }\n//   clickedIzlazi(playerId: number)\n//   {\n//     this.selectedPlayerIdIn = playerId;\n//   }\n//   swapPlayers() {\n//     console.log(\"USO SAM U SWAP\");\n//     console.log(this.selectedPlayerIdOut, this.selectedPlayerIdIn)\n//     if (this.selectedPlayerIdOut !== null && this.selectedPlayerIdIn !== null) {\n//       console.log(\"Ids igraca terena\" + this.igraciTerenIds);\n//       console.log(\"Ids igraca zamena\" + this.igraciZamenaIds);\n//       const indexTerena = this.igraciTerenIds.indexOf(this.selectedPlayerIdIn);\n//       const indexKlupe = this.igraciZamenaIds.indexOf(this.selectedPlayerIdOut);\n//       console.log(indexTerena, indexKlupe + \" : INDEX TERENA I KLUPE\");\n//       const ajdi1 = this.igraciTerenIds[indexTerena];\n//       const ajdi2 = this.igraciZamenaIds[indexKlupe];\n//       const igracIzlazi = this.fudbalskitimService.getIgracById(ajdi1);\n//       const igracUlazi = this.fudbalskitimService.getIgracById(ajdi2);\n//       if (indexTerena !== -1 && indexKlupe !== -1) {\n//         // Zamena ID-jeva u nizovima\n//         [this.igraciTerenIds[indexTerena], this.igraciZamenaIds[indexKlupe]] = [this.igraciZamenaIds[indexKlupe], this.igraciTerenIds[indexTerena]];\n//         this.fudbalskitimService.updateTimIgraci( this.trenutniTimID, this.igraciTerenIds, this.igraciZamenaIds, this.trenutniTim,).subscribe(() => {\n//           console.log(\"Uspesno azurirani igraci u timu!\");\n//         });\n//       }\n//       igracIzlazi.forEach((igrac) => console.log(igrac));\n//       igracUlazi.forEach((igrac) => console.log(igrac));\n//       //   this.fudbalskitimService.updateIgraciUtimu(this.trenutniTimID, igracIzlazi).subscribe();\n//       // this.fudbalskitimService.updateIgraciUtimu(this.trenutniTimID, igracUlazi).subscribe(); \n//       this.selectedPlayerIdOut = null;\n//       this.selectedPlayerIdIn = null;\n//       this.ngOnInit();\n//     }\n//   }\n// }","map":{"version":3,"names":[],"sources":["D:\\OneDrive\\OneDrive - Faculty of Electronic Engineering\\Radna povr≈°ina\\AngularProjekat\\src\\app\\components\\fudbalskitim\\fudbalskitim.component.ts"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable, filter, forkJoin, of } from 'rxjs';\nimport { Igrac } from 'src/app/models/igrac';\nimport { FudbalskitimService } from 'src/app/services/fudbalskitim.service';\n\n\n@Component({\n  selector: 'app-fudbalskitim',\n  templateUrl: './fudbalskitim.component.html',\n  styleUrls: ['./fudbalskitim.component.css']\n})\n\n\n// export class FudbalskitimComponent implements OnInit {\n\n//   trenutniTimID = 2; //hardcodede\n//   trenutniTim: any;\n//   igraciTerenIds: number[] = [];\n//   igraciZamenaIds: number[] = [];\n//   igraciTeren: any[] = [];\n//   igraciZamena: any[] = [];\n\n//   golmani: any[] = [];\n//   odbrambeni: any[] = [];\n//   veznjaci: any[] = [];\n//   napadaci: any[] = [];\n\n//   // igrac$: Observable<Igrac[]> = of([]);\n\n//   constructor(private fudbalskitimService: FudbalskitimService) { }\n\n//   ngOnInit(): void {\n//     // this.igrac$ = this.fudbalskitimService.getSviIgraci();\n//     this.fudbalskitimService.getTimById(this.trenutniTimID).subscribe((tim) => {\n\n//       this.trenutniTim = tim;\n//       this.igraciTerenIds = tim.igraciTeren;\n//       this.igraciZamenaIds = tim.igraciZamena;\n\n//       const requests = this.igraciZamenaIds.map((igracId: number) =>\n//       this.fudbalskitimService.getIgracById(igracId)\n//     );\n\n//     forkJoin(requests).subscribe((igraci: Igrac[][]) => {\n//       this.igraciZamena = igraci.flat(); //flat - ovde ce spojimo nizove u jedan niz objekata\n//     });\n\n//     //koristimo FORKJOIN za istovremeno pozivanje vise zahteva, i ceka se da se svi zahtevi zavrse pre nego sto se obrade rezultati\n\n//     this.fudbalskitimService.getIgraciByPozicija('golman', this.trenutniTimID).subscribe((igraci: Igrac[]) => {\n//       this.golmani = igraci.filter(igrac => this.igraciTerenIds.includes(igrac.id));\n//     });\n\n//       this.fudbalskitimService.getIgraciByPozicija('odbrana', this.trenutniTimID).subscribe((igraci: Igrac[]) => {\n//         this.odbrambeni = igraci.filter(igrac => this.igraciTerenIds.includes(igrac.id)); // dodelice se samo oni ciji se id nalazi u igraciTerenIds!\n//       });\n\n//       this.fudbalskitimService.getIgraciByPozicija('sredina', this.trenutniTimID).subscribe((igraci: Igrac[]) => {\n//         this.veznjaci = igraci.filter(igrac => this.igraciTerenIds.includes(igrac.id));\n//       });\n//       this.fudbalskitimService.getIgraciByPozicija('napad', this.trenutniTimID).subscribe((igraci: Igrac[]) => {\n//         this.napadaci = igraci.filter(igrac => this.igraciTerenIds.includes(igrac.id));\n//       });\n//     })\n//   }\n\n//   @Output() onClick:EventEmitter<Igrac>=new EventEmitter<Igrac>();\n\n//   selectedPlayerIdOut: number | null = null;\n//   selectedPlayerIdIn: number | null = null;\n\n//   clickedUlazi(playerId: number)\n//   {\n//     this.selectedPlayerIdOut = playerId;\n//   }\n\n//   clickedIzlazi(playerId: number)\n//   {\n//     this.selectedPlayerIdIn = playerId;\n//   }\n\n//   swapPlayers() {\n//     console.log(\"USO SAM U SWAP\");\n//     console.log(this.selectedPlayerIdOut, this.selectedPlayerIdIn)\n//     if (this.selectedPlayerIdOut !== null && this.selectedPlayerIdIn !== null) {\n//       console.log(\"Ids igraca terena\" + this.igraciTerenIds);\n//       console.log(\"Ids igraca zamena\" + this.igraciZamenaIds);\n//       const indexTerena = this.igraciTerenIds.indexOf(this.selectedPlayerIdIn);\n//       const indexKlupe = this.igraciZamenaIds.indexOf(this.selectedPlayerIdOut);\n//       console.log(indexTerena, indexKlupe + \" : INDEX TERENA I KLUPE\");\n  \n\n//       const ajdi1 = this.igraciTerenIds[indexTerena];\n//       const ajdi2 = this.igraciZamenaIds[indexKlupe];\n\n//       const igracIzlazi = this.fudbalskitimService.getIgracById(ajdi1);\n//       const igracUlazi = this.fudbalskitimService.getIgracById(ajdi2);\n\n//       if (indexTerena !== -1 && indexKlupe !== -1) {\n//         // Zamena ID-jeva u nizovima\n//         [this.igraciTerenIds[indexTerena], this.igraciZamenaIds[indexKlupe]] = [this.igraciZamenaIds[indexKlupe], this.igraciTerenIds[indexTerena]];\n\n//         this.fudbalskitimService.updateTimIgraci( this.trenutniTimID, this.igraciTerenIds, this.igraciZamenaIds, this.trenutniTim,).subscribe(() => {\n//           console.log(\"Uspesno azurirani igraci u timu!\");\n//         });\n//       }\n\n  \n//       igracIzlazi.forEach((igrac) => console.log(igrac));\n//       igracUlazi.forEach((igrac) => console.log(igrac));\n     \n//       //   this.fudbalskitimService.updateIgraciUtimu(this.trenutniTimID, igracIzlazi).subscribe();\n//       // this.fudbalskitimService.updateIgraciUtimu(this.trenutniTimID, igracUlazi).subscribe(); \n\n//       this.selectedPlayerIdOut = null;\n//       this.selectedPlayerIdIn = null;\n//       this.ngOnInit();\n      \n//     }\n//   }\n\n// }\n\n\n\n"],"mappings":"AAWE;AAGF;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}