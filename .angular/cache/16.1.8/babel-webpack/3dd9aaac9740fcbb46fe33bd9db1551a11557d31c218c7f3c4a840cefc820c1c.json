{"ast":null,"code":"var _class, _class2;\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { forkJoin, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap, withLatestFrom } from 'rxjs/operators';\nimport * as TimActions from 'src/app/store/igrac.action';\nimport * as IgracActions from 'src/app/store/igrac.action';\nimport * as fromApp from './igrac.selector';\nimport { select } from '@ngrx/store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/fudbalskitim.service\";\nimport * as i3 from \"@ngrx/store\";\nexport class TimEffects {\n  constructor(actions$, fudbalskiTimService, store) {\n    this.actions$ = actions$;\n    this.fudbalskiTimService = fudbalskiTimService;\n    this.store = store;\n    this.swapPlayers$ = createEffect(() => this.actions$.pipe(ofType(TimActions.swapPlayers), withLatestFrom(this.store.pipe(select(fromApp.selectTimState))), switchMap(([action, timState]) => {\n      const {\n        igracIzlaziId,\n        igracUlaziId\n      } = action;\n      const {\n        igraciTeren,\n        igraciZamena,\n        trenutniTimID\n      } = timState;\n      if (igracIzlaziId !== null && igracUlaziId !== null) {\n        // Kreiraj ažuriranu listu igracaTeren i igracaZamena na osnovu zamene\n        const updatedIgraciTeren = igraciTeren.map(igrac => {\n          if (igrac.id === igracIzlaziId) {\n            return {\n              ...igrac,\n              id: igracUlaziId\n            };\n          }\n          return igrac;\n        });\n        const updatedIgraciZamena = igraciZamena.map(igrac => {\n          if (igrac.id === igracUlaziId) {\n            return {\n              ...igrac,\n              id: igracIzlaziId\n            };\n          }\n          return igrac;\n        });\n        return this.fudbalskiTimService.getTimById(trenutniTimIDtimID).pipe(switchMap(timToUpdate => {\n          if (!timToUpdate) {\n            return EMPTY; // Vratite EMPTY observable ako tim nije pronađen\n          }\n          // Pozovi akciju za ažuriranje stanja\n          return this.fudbalskiTimService.updateTimIgraci(trenutniTimID, updatedIgraciTeren.map(igrac => igrac.id), updatedIgraciZamena.map(igrac => igrac.id), timToUpdate).pipe(map(() => TimActions.swapPlayersSuccess({\n            igraciTeren: updatedIgraciTeren,\n            igraciZamena: updatedIgraciZamena\n          })), catchError(error => of({\n            type: 'Error'\n          })) // Ovde možete dalje rukovati greškom ako je potrebno\n          );\n        }));\n        // Ako nema izlazećeg ili ulazećeg igrača, ne treba ništa raditi\n        return of({\n          type: 'NoAction'\n        });\n      }\n    })));\n    this.loadTimovi$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadTimovi), mergeMap(() => this.fudbalskiTimService.getSviTimovi().pipe(map(timovi => TimActions.loadTimoviSuccess({\n      timovi\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.updateTim$ = createEffect(() => this.actions$.pipe(ofType(TimActions.updateTim), mergeMap(action => this.fudbalskiTimService.updateTimIgraci(action.timId, action.igraciTeren, action.igraciZamena, action.tim).pipe(map(() => TimActions.updateTimSuccess()), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getTimById$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadTimById), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(map(tim => {\n      const igraciTeren = tim.igraciTeren;\n      const igraciZamena = tim.igraciZamena;\n      return TimActions.loadTimByIdSuccess({\n        tim,\n        igraciTeren,\n        igraciZamena\n      });\n    }), catchError(() => of({\n      type: 'load error'\n    }))))));\n  }\n}\n_class = TimEffects;\n_class.ɵfac = function TimEffects_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.FudbalskitimService), i0.ɵɵinject(i3.Store));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});\nexport class IgracEffects {\n  constructor(actions$, fudbalskiTimService) {\n    this.actions$ = actions$;\n    this.fudbalskiTimService = fudbalskiTimService;\n    this.loadIgraci$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.loadIgraci), mergeMap(() => this.fudbalskiTimService.getSviIgraci().pipe(map(igraci => IgracActions.loadIgraciSuccess({\n      igraci\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getIgracById$ = createEffect(() => this.actions$.pipe(ofType(IgracActions.loadIgracById), mergeMap(action => this.fudbalskiTimService.getIgracById(action.igracID).pipe(map(igrac => IgracActions.loadIgracByIdSuccess({\n      igrac\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getIgraciByPozicija$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadIgraciByPozicija), mergeMap(action => this.fudbalskiTimService.getIgraciByPozicija(action.pozicija, action.timID).pipe(map(igraci => IgracActions.loadIgraciByPozicijaSuccess({\n      igraci\n    })), catchError(() => of({\n      type: 'load error'\n    }))))));\n    this.getIgraciZamena$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadIgraciZamena), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(map(tim => tim.igraciZamena), switchMap(igraciZamenaIds => this.fudbalskiTimService.getIgraciByIds(igraciZamenaIds).pipe(map(igraciZamena => TimActions.loadIgraciZamenaSuccess({\n      igraciZamena\n    })), catchError(() => of({\n      type: 'load error'\n    }))))))));\n    this.getIgraciTeren$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadIgraciTeren), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(map(tim => tim.igraciTeren), switchMap(igraciTerenIds => this.fudbalskiTimService.getIgraciByIds(igraciTerenIds).pipe(map(igraciTeren => TimActions.loadIgraciTerenSuccess({\n      igraciTeren\n    })), catchError(() => of({\n      type: 'load error'\n    }))))))));\n    this.loadGolmani$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadGolmani), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const golmaniIds = tim.igraciTeren;\n      const igraciRequests = golmaniIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const golmani = igraci.filter(igrac => igrac.pozicija === 'golman');\n        return TimActions.loadGolmaniSuccess({\n          golmani\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n    this.loadOdbrambeni$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadOdbrambeni), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const odbrambeniIds = tim.igraciTeren;\n      const igraciRequests = odbrambeniIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const odbrambeni = igraci.filter(igrac => igrac.pozicija === 'odbrana');\n        return TimActions.loadOdbrambeniSuccess({\n          odbrambeni\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n    this.loadVeznjaci$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadVeznjaci), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const veznjaciIds = tim.igraciTeren;\n      const igraciRequests = veznjaciIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const veznjaci = igraci.filter(igrac => igrac.pozicija === 'sredina');\n        return TimActions.loadVeznjaciSuccess({\n          veznjaci\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n    this.loadNapadaci$ = createEffect(() => this.actions$.pipe(ofType(TimActions.loadNapadaci), mergeMap(action => this.fudbalskiTimService.getTimById(action.timID).pipe(switchMap(tim => {\n      const napadaciIds = tim.igraciTeren;\n      const igraciRequests = napadaciIds.map(id => this.fudbalskiTimService.getIgracById(id));\n      return forkJoin(igraciRequests).pipe(map(igraci => {\n        const napadaci = igraci.filter(igrac => igrac.pozicija === 'sredina');\n        return TimActions.loadNapadaciSuccess({\n          napadaci\n        });\n      }), catchError(error => of( /* Ovde možete implementirati akciju za obradu greške */)));\n    })))));\n  }\n}\n_class2 = IgracEffects;\n_class2.ɵfac = function IgracEffects_Factory(t) {\n  return new (t || _class2)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.FudbalskitimService));\n};\n_class2.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class2,\n  factory: _class2.ɵfac\n});","map":{"version":3,"names":["createEffect","ofType","forkJoin","of","catchError","map","mergeMap","switchMap","withLatestFrom","TimActions","IgracActions","fromApp","select","TimEffects","constructor","actions$","fudbalskiTimService","store","swapPlayers$","pipe","swapPlayers","selectTimState","action","timState","igracIzlaziId","igracUlaziId","igraciTeren","igraciZamena","trenutniTimID","updatedIgraciTeren","igrac","id","updatedIgraciZamena","getTimById","trenutniTimIDtimID","timToUpdate","EMPTY","updateTimIgraci","swapPlayersSuccess","error","type","loadTimovi$","loadTimovi","getSviTimovi","timovi","loadTimoviSuccess","updateTim$","updateTim","timId","tim","updateTimSuccess","getTimById$","loadTimById","timID","loadTimByIdSuccess","i0","ɵɵinject","i1","Actions","i2","FudbalskitimService","i3","Store","factory","ɵfac","IgracEffects","loadIgraci$","loadIgraci","getSviIgraci","igraci","loadIgraciSuccess","getIgracById$","loadIgracById","getIgracById","igracID","loadIgracByIdSuccess","getIgraciByPozicija$","loadIgraciByPozicija","getIgraciByPozicija","pozicija","loadIgraciByPozicijaSuccess","getIgraciZamena$","loadIgraciZamena","igraciZamenaIds","getIgraciByIds","loadIgraciZamenaSuccess","getIgraciTeren$","loadIgraciTeren","igraciTerenIds","loadIgraciTerenSuccess","loadGolmani$","loadGolmani","golmaniIds","igraciRequests","golmani","filter","loadGolmaniSuccess","loadOdbrambeni$","loadOdbrambeni","odbrambeniIds","odbrambeni","loadOdbrambeniSuccess","loadVeznjaci$","loadVeznjaci","veznjaciIds","veznjaci","loadVeznjaciSuccess","loadNapadaci$","loadNapadaci","napadaciIds","napadaci","loadNapadaciSuccess"],"sources":["D:\\OneDrive\\OneDrive - Faculty of Electronic Engineering\\Radna površina\\AngularProjekat\\src\\app\\store\\igrac.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Observable, forkJoin, of } from 'rxjs';\r\nimport { catchError, map, mergeMap, switchMap, withLatestFrom } from 'rxjs/operators';\r\nimport { FudbalskitimService } from '../services/fudbalskitim.service';\r\nimport * as TimActions from 'src/app/store/igrac.action';\r\nimport * as IgracActions from 'src/app/store/igrac.action';\r\nimport { Igrac } from '../models/igrac';\r\nimport * as fromApp from './igrac.selector';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { selectIgraciTeren, selectIgraciZamena, selectSveState, selectTimState } from './igrac.selector';\r\nimport { AppState } from '../app.state';\r\n\r\n@Injectable()\r\nexport class TimEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private fudbalskiTimService: FudbalskitimService,\r\n    private store: Store<AppState>\r\n  ) {}\r\n\r\n  swapPlayers$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.swapPlayers),\r\n      withLatestFrom(this.store.pipe(select(fromApp.selectTimState))),\r\n      switchMap(([action, timState]) => {\r\n        const { igracIzlaziId, igracUlaziId } = action;\r\n        const { igraciTeren, igraciZamena, trenutniTimID } = timState;\r\n\r\n        if (igracIzlaziId !== null && igracUlaziId !== null) {\r\n          // Kreiraj ažuriranu listu igracaTeren i igracaZamena na osnovu zamene\r\n          const updatedIgraciTeren = igraciTeren.map(igrac => {\r\n            if (igrac.id === igracIzlaziId) {\r\n              return { ...igrac, id: igracUlaziId };\r\n            }\r\n            return igrac;\r\n          });\r\n\r\n          const updatedIgraciZamena = igraciZamena.map(igrac => {\r\n            if (igrac.id === igracUlaziId) {\r\n              return { ...igrac, id: igracIzlaziId };\r\n            }\r\n            return igrac;\r\n          });\r\n\r\n          return this.fudbalskiTimService.getTimById(trenutniTimIDtimID).pipe(\r\n            switchMap(timToUpdate => {\r\n              if (!timToUpdate) {\r\n                return EMPTY; // Vratite EMPTY observable ako tim nije pronađen\r\n              }\r\n          // Pozovi akciju za ažuriranje stanja\r\n          return this.fudbalskiTimService.updateTimIgraci(\r\n            trenutniTimID,\r\n            updatedIgraciTeren.map(igrac => igrac.id),\r\n            updatedIgraciZamena.map(igrac => igrac.id),\r\n            timToUpdate\r\n          ).pipe(\r\n            map(() => TimActions.swapPlayersSuccess({ igraciTeren: updatedIgraciTeren, igraciZamena: updatedIgraciZamena })),\r\n            catchError(error => of({ type: 'Error' })) // Ovde možete dalje rukovati greškom ako je potrebno\r\n          );\r\n        }\r\n\r\n        // Ako nema izlazećeg ili ulazećeg igrača, ne treba ništa raditi\r\n        return of({ type: 'NoAction' });\r\n      })\r\n    )\r\n  )\r\n\r\n  loadTimovi$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadTimovi),\r\n      mergeMap(() =>\r\n        this.fudbalskiTimService.getSviTimovi()\r\n          .pipe(\r\n            map(timovi => TimActions.loadTimoviSuccess({ timovi })),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  updateTim$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.updateTim),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.updateTimIgraci(\r\n          action.timId, action.igraciTeren, action.igraciZamena, action.tim\r\n        )\r\n          .pipe(\r\n            map(() => TimActions.updateTimSuccess()),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  getTimById$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(TimActions.loadTimById),\r\n    mergeMap(action =>\r\n      this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n        map(tim => {\r\n          const igraciTeren = tim.igraciTeren;\r\n          const igraciZamena = tim.igraciZamena;\r\n          return TimActions.loadTimByIdSuccess({ tim,\r\n             igraciTeren, igraciZamena \r\n            });\r\n        }),\r\n        catchError(() => of({ type: 'load error' }))\r\n      )\r\n    )\r\n  )\r\n);\r\n\r\n   \r\n}\r\n\r\n@Injectable()\r\nexport class IgracEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private fudbalskiTimService: FudbalskitimService\r\n  ) {}\r\n\r\n  loadIgraci$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(IgracActions.loadIgraci),\r\n      mergeMap(() =>\r\n        this.fudbalskiTimService.getSviIgraci()\r\n          .pipe(\r\n            map(igraci => IgracActions.loadIgraciSuccess({ igraci })),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgracById$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(IgracActions.loadIgracById),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getIgracById(action.igracID).pipe(\r\n          map(igrac => IgracActions.loadIgracByIdSuccess({ igrac })),\r\n          catchError(() => of({ type: 'load error' }))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgraciByPozicija$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(TimActions.loadIgraciByPozicija),\r\n      mergeMap(action =>\r\n        this.fudbalskiTimService.getIgraciByPozicija(action.pozicija, action.timID).pipe(\r\n          map(igraci => IgracActions.loadIgraciByPozicijaSuccess({ igraci })), \r\n          catchError(() => of({ type: 'load error' }))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getIgraciZamena$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(TimActions.loadIgraciZamena),\r\n    mergeMap(action =>\r\n      this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n        map(tim => tim.igraciZamena),\r\n        switchMap(igraciZamenaIds => \r\n          this.fudbalskiTimService.getIgraciByIds(igraciZamenaIds).pipe(\r\n            map(igraciZamena => TimActions.loadIgraciZamenaSuccess({ igraciZamena })),\r\n            catchError(() => of({ type: 'load error' }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )\r\n);\r\n\r\ngetIgraciTeren$ = createEffect(() =>\r\nthis.actions$.pipe(\r\n  ofType(TimActions.loadIgraciTeren),\r\n  mergeMap(action =>\r\n    this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n      map(tim => tim.igraciTeren),\r\n      switchMap(igraciTerenIds => \r\n        this.fudbalskiTimService.getIgraciByIds(igraciTerenIds).pipe(\r\n          map(igraciTeren => TimActions.loadIgraciTerenSuccess({ igraciTeren })),\r\n          catchError(() => of({ type: 'load error' }))\r\n        )\r\n      )\r\n    )\r\n  )\r\n)\r\n);\r\n\r\nloadGolmani$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(TimActions.loadGolmani),\r\n    mergeMap(action =>\r\n      this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n        switchMap((tim: any) => {\r\n          const golmaniIds: number[] = tim.igraciTeren;\r\n          const igraciRequests: Observable<Igrac>[] = golmaniIds.map((id: number) =>\r\n            this.fudbalskiTimService.getIgracById(id)\r\n          );\r\n\r\n          return forkJoin(igraciRequests).pipe(\r\n            map((igraci: Igrac[]) => {\r\n              const golmani: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'golman');\r\n              return TimActions.loadGolmaniSuccess({ golmani });\r\n            }),\r\n            catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n          );\r\n        })\r\n      )\r\n    )\r\n  )\r\n);\r\n\r\nloadOdbrambeni$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(TimActions.loadOdbrambeni),\r\n    mergeMap(action =>\r\n      this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n        switchMap((tim: any) => {\r\n          const odbrambeniIds: number[] = tim.igraciTeren;\r\n          const igraciRequests: Observable<Igrac>[] = odbrambeniIds.map((id: number) =>\r\n            this.fudbalskiTimService.getIgracById(id)\r\n          );\r\n\r\n          return forkJoin(igraciRequests).pipe(\r\n            map((igraci: Igrac[]) => {\r\n              const odbrambeni: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'odbrana');\r\n              return TimActions.loadOdbrambeniSuccess({ odbrambeni });\r\n            }),\r\n            catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n          );\r\n        })\r\n      )\r\n    )\r\n  )\r\n);\r\n\r\nloadVeznjaci$ = createEffect(() => \r\n  this.actions$.pipe(\r\n    ofType(TimActions.loadVeznjaci),\r\n    mergeMap(action =>\r\n      this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n        switchMap((tim: any) => {\r\n          const veznjaciIds: number[] = tim.igraciTeren;\r\n          const igraciRequests: Observable<Igrac>[] = veznjaciIds.map((id: number) =>\r\n            this.fudbalskiTimService.getIgracById(id)\r\n          );\r\n\r\n          return forkJoin(igraciRequests).pipe(\r\n            map((igraci: Igrac[]) => {\r\n              const veznjaci: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'sredina');\r\n              return TimActions.loadVeznjaciSuccess({ veznjaci });\r\n            }),\r\n            catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n          );\r\n        })\r\n      )\r\n    )\r\n  )\r\n);\r\n\r\nloadNapadaci$ = createEffect(() => \r\n  this.actions$.pipe(\r\n    ofType(TimActions.loadNapadaci),\r\n    mergeMap(action =>\r\n      this.fudbalskiTimService.getTimById(action.timID).pipe(\r\n        switchMap((tim: any) => {\r\n          const napadaciIds: number[] = tim.igraciTeren;\r\n          const igraciRequests: Observable<Igrac>[] = napadaciIds.map((id: number) =>\r\n            this.fudbalskiTimService.getIgracById(id)\r\n          );\r\n\r\n          return forkJoin(igraciRequests).pipe(\r\n            map((igraci: Igrac[]) => {\r\n              const napadaci: Igrac[] = igraci.filter(igrac => igrac.pozicija === 'sredina');\r\n              return TimActions.loadNapadaciSuccess({ napadaci });\r\n            }),\r\n            catchError(error => of(/* Ovde možete implementirati akciju za obradu greške */))\r\n          );\r\n        })\r\n      )\r\n    )\r\n  )\r\n);\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}